# ------------------------------------------------------------------
# This configuration file uses explicit analysis of local integer
# variables in a model-checking configuration.
# Found errors are cross-checked by CBMC.
#
# This configuration uses a CEGAR approach, by only tracking
# "important" variables. As only running an ExplicitCPA leads to
# rather poor results, this configuration also utilizes and
# refines a PredicateCPA to improve the precision of the analysis.
# ------------------------------------------------------------------

# only paths to possible error locations are analyzed
# This does currently not work if function pointers exist.
#cfa.removeIrrelevantForErrorLocations = true

analysis.useCBMC = true
counterexample.continueAfterInfeasibleError = true

cpa						= cpa.art.ARTCPA
ARTCPA.cpa				= cpa.functionpointer.FunctionPointerCPA
FunctionPointerCPA.cpa	= cpa.composite.CompositeCPA
# PredicateCPA runs alongside with ExplicitCPA
CompositeCPA.cpas		= cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.explicit.ExplicitCPA, cpa.predicate.PredicateCPA, cpa.conditions.global.GlobalConditionsCPA

# this automaton defines which locations are the error locations
specification = config/specification/ErrorLocation.spc  

# same as in standard configuration of PredicateCPA
analysis.traversal.order			= bfs
analysis.traversal.useTopsort		= true
analysis.traversal.useCallstack		= true

# casts are ignored by PredicateCPA anyway, thus we can remove all of them and work around a CIL bug
parser.ignoreCasts = true

# use refinement, but as refiner, use ExplicitRefiner
analysis.useRefinement	= true
cegar.refiner			= cpa.explicit.ExplicitRefiner

# same as in standard configuration of PredicateCPA, however, add block threshold of "1" (this needs further investigation)
cpa.predicate.blk.alwaysAtFunctions	= false
cpa.predicate.blk.alwaysAtLoops		= true

cpa.conditions.global.time.wall = 15min