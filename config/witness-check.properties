#include sv-comp15.properties

analysis.traversal.order               = bfs
analysis.traversal.useReversePostorder = false
analysis.traversal.useCallstack        = false

# When checking witnesses, the witness automaton must agree with the
# specification automata on target states.
cpa.automaton.treatErrorsAsTargets     = false
WitnessAutomaton.cpa.automaton.treatErrorsAsTargets  = true

# CPAchecker is able to detect variables only
# used in a boolean context and treat !0 as 1,
# but other tools might just as well use 5.
cpa.value.optimizeBooleanVariables     = false

# When checking witnesses, the target state is marked as target during strengthening.
# In order to ensure that the predicate state for this state is an abstraction state,
# this special handling needs to be enabled:  
cpa.composite.inCPAEnabledAnalysis     = true

# Keep as much of the source code as possible:
# Other tools may use that code in their witnesses
cfa.simplifyCfa                        = false

# Multi-edge optimization is not required for witness checking,
# because it should be fast anyway; also, it might cause problems
cfa.useMultiEdges                      = false

# For witness checking, then/else branches must be mapped correctly
cfa.allowBranchSwapping                = false

parser.transformTokensToLines          = false

spec.matchOriginLine                   = true
spec.matchOffset                       = true
spec.matchAssumeCase                   = true
spec.matchSourcecodeData               = false
spec.strictMatching                    = false

output.disable = false

memorysafety.config = witness-check--memorysafety.properties