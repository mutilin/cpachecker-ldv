/* The following code was generated by JFlex 1.4.3 on 03.03.15 16:40 */

package org.sosy_lab.cpachecker.cpa.automaton;

import java.io.Reader;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import org.sosy_lab.common.io.Files;
import org.sosy_lab.common.io.Path;
import org.sosy_lab.common.io.Paths;
import org.sosy_lab.common.log.LogManager;
import org.sosy_lab.common.configuration.Configuration;
import java.io.FileNotFoundException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

@javax.annotation.Generated("JFlex")
@SuppressWarnings(value = { "all", "unchecked", "fallthrough" })

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.03.15 16:40 from the specification file
 * <tt>/home/alpha/git/cpachecker/src/org/sosy_lab/cpachecker/cpa/automaton/Scanner.jflex</tt>
 */
class AutomatonScanner implements java_cup.runtime.Scanner, AutomatonSym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SQUAREEXPR = 6;
  public static final int CURLYEXPR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\70"+
    "\1\65\1\12\1\6\1\0\1\72\1\0\1\24\1\25\1\5\1\74"+
    "\1\64\1\26\1\0\1\4\1\10\11\11\1\23\1\22\1\0\1\71"+
    "\1\27\2\0\1\30\1\40\1\44\1\37\1\36\1\53\1\55\1\52"+
    "\1\46\1\6\1\50\1\45\1\34\1\35\1\33\1\47\1\6\1\42"+
    "\1\41\1\32\1\31\1\43\1\6\1\51\1\54\1\6\1\67\1\75"+
    "\1\77\1\0\1\63\1\0\1\61\1\6\1\15\1\20\1\21\1\60"+
    "\2\6\1\13\2\6\1\16\1\6\1\14\3\6\1\57\1\62\1\56"+
    "\1\17\5\6\1\66\1\73\1\76\1\0\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6"+
    "\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6"+
    "\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7"+
    "\10\0\33\6\5\0\3\6\15\0\4\7\7\0\1\6\4\0\13\7"+
    "\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7"+
    "\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0"+
    "\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7"+
    "\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6"+
    "\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7"+
    "\244\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7"+
    "\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0"+
    "\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7"+
    "\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0"+
    "\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\12\0"+
    "\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0"+
    "\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0"+
    "\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0"+
    "\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6"+
    "\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0"+
    "\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0"+
    "\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0"+
    "\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7"+
    "\21\0\11\7\14\0\3\7\36\6\12\7\3\0\2\6\12\7\6\0"+
    "\46\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7"+
    "\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\1\7\15\0"+
    "\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0"+
    "\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0"+
    "\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0"+
    "\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0"+
    "\32\6\26\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0"+
    "\205\6\6\0\4\6\3\7\16\0\46\6\12\0\66\6\11\0\1\6"+
    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6"+
    "\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6\2\0\u010d\6"+
    "\3\0\20\6\12\7\2\6\24\0\57\6\1\7\14\0\2\7\1\0"+
    "\31\6\10\0\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6"+
    "\1\0\2\6\16\0\12\6\120\0\10\6\1\7\3\6\1\7\4\6"+
    "\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6"+
    "\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7"+
    "\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6"+
    "\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7"+
    "\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0"+
    "\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7"+
    "\1\6\30\0\3\6\43\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7"+
    "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6\2\0\76\6"+
    "\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6"+
    "\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7"+
    "\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6"+
    "\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\1\1\3\2\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\21\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\1\1\20\1\21\1\22\1\1"+
    "\1\21\1\23\1\24\1\1\1\25\1\21\1\1\1\26"+
    "\3\0\1\27\14\3\1\30\15\3\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\2\3\0"+
    "\10\3\1\42\21\3\2\0\6\3\1\43\4\3\1\44"+
    "\1\45\2\3\1\46\10\3\1\47\1\3\1\0\7\3"+
    "\1\50\1\3\1\51\1\52\1\53\1\3\1\54\1\55"+
    "\1\56\2\3\1\57\1\60\1\0\1\3\1\61\1\62"+
    "\1\63\1\3\1\64\1\3\1\65\3\3\1\0\3\3"+
    "\1\66\1\67\1\3\1\0\1\3\1\70\1\71\1\3"+
    "\1\72\1\73\6\3\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0100\0\u0180"+
    "\0\u01c0\0\u0100\0\u0200\0\u0240\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440"+
    "\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640"+
    "\0\u0680\0\u06c0\0\u0100\0\u0100\0\u0100\0\u0100\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0100\0\u0800\0\u0100\0\u0840\0\u0880\0\u0100"+
    "\0\u0100\0\u08c0\0\u0100\0\u0900\0\u0940\0\u0100\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0100\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u01c0\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0980\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u01c0\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880"+
    "\0\u18c0\0\u1900\0\u1940\0\u01c0\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u01c0\0\u01c0\0\u1a80\0\u1ac0\0\u01c0\0\u1b00\0\u1b40\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u01c0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u01c0"+
    "\0\u1f40\0\u01c0\0\u01c0\0\u01c0\0\u1f80\0\u01c0\0\u01c0\0\u01c0"+
    "\0\u1fc0\0\u2000\0\u01c0\0\u01c0\0\u2040\0\u2080\0\u01c0\0\u01c0"+
    "\0\u01c0\0\u20c0\0\u01c0\0\u2100\0\u01c0\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u22c0\0\u01c0\0\u01c0\0\u2300\0\u2340"+
    "\0\u2380\0\u01c0\0\u01c0\0\u23c0\0\u2340\0\u01c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u01c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\5\1\11\1\5\1\12"+
    "\1\13\1\14\7\11\1\15\1\16\1\17\1\20\1\21"+
    "\1\5\1\22\1\23\1\24\1\25\1\26\1\11\1\27"+
    "\1\30\1\31\1\32\2\11\1\33\1\34\1\35\1\36"+
    "\3\11\1\37\1\11\1\40\1\41\1\11\1\42\3\11"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\3\5\1\54\2\5\62\54\1\55\7\54\1\56"+
    "\2\54\1\57\1\60\1\61\72\57\1\62\1\63\1\57"+
    "\1\64\2\5\72\64\1\65\1\64\1\66\102\0\1\7"+
    "\101\0\1\67\1\70\100\0\4\11\1\0\7\11\6\0"+
    "\34\11\24\0\2\13\101\0\1\71\113\0\1\72\56\0"+
    "\4\11\1\0\7\11\6\0\1\11\1\73\7\11\1\74"+
    "\22\11\22\0\4\11\1\0\7\11\6\0\11\11\1\75"+
    "\22\11\22\0\4\11\1\0\7\11\6\0\1\76\11\11"+
    "\1\77\21\11\22\0\4\11\1\0\7\11\6\0\10\11"+
    "\1\100\23\11\22\0\4\11\1\0\7\11\6\0\1\101"+
    "\2\11\1\102\30\11\22\0\4\11\1\0\7\11\6\0"+
    "\5\11\1\103\4\11\1\104\1\105\5\11\1\106\12\11"+
    "\22\0\4\11\1\0\7\11\6\0\3\11\1\107\30\11"+
    "\22\0\4\11\1\0\7\11\6\0\12\11\1\110\21\11"+
    "\22\0\4\11\1\0\7\11\6\0\2\11\1\111\31\11"+
    "\22\0\4\11\1\0\7\11\6\0\3\11\1\112\16\11"+
    "\1\113\11\11\22\0\4\11\1\0\7\11\6\0\1\114"+
    "\2\11\1\115\30\11\22\0\4\11\1\0\7\11\6\0"+
    "\5\11\1\116\3\11\1\117\22\11\22\0\4\11\1\0"+
    "\7\11\6\0\12\11\1\120\21\11\22\0\4\11\1\0"+
    "\7\11\6\0\1\121\33\11\22\0\4\11\1\0\7\11"+
    "\6\0\3\11\1\122\30\11\22\0\4\11\1\0\7\11"+
    "\6\0\27\11\1\123\4\11\22\0\4\11\1\0\7\11"+
    "\6\0\31\11\1\124\2\11\105\0\1\125\77\0\1\126"+
    "\100\0\1\127\100\0\1\130\4\0\1\54\2\0\62\54"+
    "\1\0\7\54\1\0\2\54\14\0\1\61\41\0\1\131"+
    "\1\60\5\0\1\132\7\0\1\133\2\0\1\57\2\0"+
    "\72\57\2\0\1\57\14\0\1\61\41\0\1\131\1\60"+
    "\15\0\1\133\1\134\1\0\1\64\2\0\72\64\1\0"+
    "\1\64\15\0\1\61\41\0\1\131\1\60\15\0\1\133"+
    "\1\0\1\135\1\67\1\136\1\7\75\67\5\137\1\140"+
    "\72\137\14\0\1\141\71\0\4\11\1\0\7\11\6\0"+
    "\2\11\1\142\31\11\22\0\4\11\1\0\7\11\6\0"+
    "\11\11\1\143\22\11\22\0\4\11\1\0\7\11\6\0"+
    "\6\11\1\144\25\11\22\0\4\11\1\0\7\11\6\0"+
    "\12\11\1\145\21\11\22\0\4\11\1\0\7\11\6\0"+
    "\1\11\1\146\32\11\22\0\4\11\1\0\7\11\6\0"+
    "\11\11\1\147\22\11\22\0\4\11\1\0\7\11\6\0"+
    "\2\11\1\150\31\11\22\0\4\11\1\0\7\11\6\0"+
    "\7\11\1\151\24\11\22\0\4\11\1\0\7\11\6\0"+
    "\7\11\1\152\24\11\22\0\4\11\1\0\7\11\6\0"+
    "\12\11\1\153\21\11\22\0\4\11\1\0\7\11\6\0"+
    "\1\154\33\11\22\0\4\11\1\0\7\11\6\0\16\11"+
    "\1\155\15\11\22\0\4\11\1\0\7\11\6\0\6\11"+
    "\1\156\25\11\22\0\4\11\1\0\7\11\6\0\1\157"+
    "\2\11\1\160\30\11\22\0\4\11\1\0\7\11\6\0"+
    "\5\11\1\161\26\11\22\0\4\11\1\0\7\11\6\0"+
    "\6\11\1\162\25\11\22\0\4\11\1\0\7\11\6\0"+
    "\10\11\1\163\23\11\22\0\4\11\1\0\7\11\6\0"+
    "\14\11\1\164\17\11\22\0\4\11\1\0\7\11\6\0"+
    "\16\11\1\165\15\11\22\0\4\11\1\0\7\11\6\0"+
    "\33\11\1\166\22\0\4\11\1\0\7\11\6\0\16\11"+
    "\1\167\15\11\22\0\4\11\1\0\7\11\6\0\15\11"+
    "\1\170\16\11\22\0\4\11\1\0\7\11\6\0\2\11"+
    "\1\171\31\11\22\0\4\11\1\0\4\11\1\172\2\11"+
    "\6\0\34\11\22\0\4\11\1\0\3\11\1\173\3\11"+
    "\6\0\34\11\14\0\5\137\1\174\72\137\4\0\1\7"+
    "\1\140\107\0\1\175\70\0\4\11\1\0\7\11\6\0"+
    "\3\11\1\176\30\11\22\0\4\11\1\0\7\11\6\0"+
    "\1\11\1\177\4\11\1\200\25\11\22\0\4\11\1\0"+
    "\7\11\6\0\1\201\22\11\1\202\10\11\22\0\4\11"+
    "\1\0\7\11\6\0\25\11\1\203\6\11\22\0\4\11"+
    "\1\0\7\11\6\0\6\11\1\204\25\11\22\0\4\11"+
    "\1\0\7\11\6\0\6\11\1\205\25\11\22\0\4\11"+
    "\1\0\7\11\6\0\14\11\1\206\17\11\22\0\4\11"+
    "\1\0\7\11\6\0\16\11\1\207\15\11\22\0\4\11"+
    "\1\0\7\11\6\0\3\11\1\210\30\11\22\0\4\11"+
    "\1\0\7\11\6\0\15\11\1\211\16\11\22\0\4\11"+
    "\1\0\7\11\6\0\2\11\1\212\31\11\22\0\4\11"+
    "\1\0\7\11\6\0\1\213\33\11\22\0\4\11\1\0"+
    "\7\11\6\0\2\11\1\214\31\11\22\0\4\11\1\0"+
    "\7\11\6\0\17\11\1\215\14\11\22\0\4\11\1\0"+
    "\7\11\6\0\2\11\1\216\31\11\22\0\4\11\1\0"+
    "\7\11\6\0\14\11\1\217\17\11\22\0\4\11\1\0"+
    "\7\11\6\0\6\11\1\220\25\11\22\0\4\11\1\0"+
    "\7\11\6\0\1\221\33\11\22\0\4\11\1\0\7\11"+
    "\6\0\2\11\1\222\31\11\22\0\4\11\1\0\7\11"+
    "\6\0\2\11\1\223\31\11\22\0\4\11\1\0\7\11"+
    "\6\0\5\11\1\224\26\11\22\0\4\11\1\0\7\11"+
    "\6\0\11\11\1\225\22\11\22\0\4\11\1\0\7\11"+
    "\6\0\3\11\1\226\30\11\22\0\4\11\1\0\6\11"+
    "\1\204\6\0\34\11\22\0\4\11\1\0\7\11\6\0"+
    "\32\11\1\227\1\11\14\0\4\137\1\7\1\174\72\137"+
    "\16\0\1\230\67\0\4\11\1\0\7\11\6\0\4\11"+
    "\1\231\27\11\22\0\4\11\1\0\7\11\6\0\4\11"+
    "\1\232\27\11\22\0\4\11\1\0\7\11\6\0\12\11"+
    "\1\233\21\11\22\0\4\11\1\0\7\11\6\0\15\11"+
    "\1\234\16\11\22\0\4\11\1\0\7\11\6\0\16\11"+
    "\1\235\15\11\22\0\4\11\1\0\7\11\6\0\6\11"+
    "\1\236\25\11\22\0\4\11\1\0\7\11\6\0\12\11"+
    "\1\237\21\11\22\0\4\11\1\0\7\11\6\0\22\11"+
    "\1\240\11\11\22\0\4\11\1\0\7\11\6\0\23\11"+
    "\1\241\10\11\22\0\4\11\1\0\7\11\6\0\12\11"+
    "\1\242\21\11\22\0\4\11\1\0\7\11\6\0\20\11"+
    "\1\243\13\11\22\0\4\11\1\0\7\11\6\0\6\11"+
    "\1\244\25\11\22\0\4\11\1\0\7\11\6\0\12\11"+
    "\1\245\21\11\22\0\4\11\1\0\7\11\6\0\20\11"+
    "\1\246\13\11\22\0\4\11\1\0\7\11\6\0\15\11"+
    "\1\247\16\11\22\0\4\11\1\0\7\11\6\0\15\11"+
    "\1\250\16\11\22\0\4\11\1\0\7\11\6\0\16\11"+
    "\1\251\15\11\22\0\4\11\1\0\7\11\6\0\1\252"+
    "\33\11\22\0\4\11\1\0\7\11\6\0\2\11\1\253"+
    "\31\11\22\0\4\11\1\0\7\11\6\0\6\11\1\254"+
    "\25\11\22\0\4\11\1\0\6\11\1\254\6\0\34\11"+
    "\33\0\1\255\66\0\4\11\1\0\7\11\6\0\1\256"+
    "\33\11\22\0\4\11\1\0\7\11\6\0\6\11\1\257"+
    "\25\11\22\0\4\11\1\0\7\11\6\0\2\11\1\260"+
    "\31\11\22\0\4\11\1\0\7\11\6\0\15\11\1\261"+
    "\16\11\22\0\4\11\1\0\7\11\6\0\12\11\1\262"+
    "\21\11\22\0\4\11\1\0\7\11\6\0\2\11\1\263"+
    "\31\11\22\0\4\11\1\0\7\11\6\0\13\11\1\264"+
    "\20\11\22\0\4\11\1\0\7\11\6\0\24\11\1\265"+
    "\7\11\22\0\4\11\1\0\7\11\6\0\3\11\1\266"+
    "\30\11\22\0\4\11\1\0\7\11\6\0\1\267\33\11"+
    "\22\0\4\11\1\0\7\11\6\0\12\11\1\270\21\11"+
    "\34\0\1\271\65\0\4\11\1\0\7\11\6\0\2\11"+
    "\1\272\31\11\22\0\4\11\1\0\7\11\6\0\11\11"+
    "\1\273\22\11\22\0\4\11\1\0\7\11\6\0\6\11"+
    "\1\274\25\11\22\0\4\11\1\0\7\11\6\0\15\11"+
    "\1\275\16\11\22\0\4\11\1\0\7\11\6\0\15\11"+
    "\1\276\16\11\22\0\4\11\1\0\7\11\6\0\25\11"+
    "\1\277\6\11\35\0\1\300\64\0\4\11\1\0\7\11"+
    "\6\0\3\11\1\301\30\11\22\0\4\11\1\0\7\11"+
    "\6\0\2\11\1\302\31\11\22\0\4\11\1\0\7\11"+
    "\6\0\12\11\1\303\21\11\22\0\4\11\1\0\7\11"+
    "\6\0\6\11\1\304\25\11\14\0\2\305\1\0\75\305"+
    "\6\0\4\11\1\0\7\11\6\0\5\11\1\306\26\11"+
    "\22\0\4\11\1\0\7\11\6\0\2\11\1\307\31\11"+
    "\22\0\4\11\1\0\7\11\6\0\33\11\1\310\22\0"+
    "\4\11\1\0\7\11\6\0\11\11\1\311\22\11\22\0"+
    "\4\11\1\0\7\11\6\0\2\11\1\312\31\11\22\0"+
    "\4\11\1\0\7\11\6\0\1\313\33\11\22\0\4\11"+
    "\1\0\7\11\6\0\2\11\1\314\31\11\22\0\4\11"+
    "\1\0\7\11\6\0\6\11\1\315\25\11\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\2\1\1\11\2\1\4\11"+
    "\22\1\4\11\4\1\1\11\1\1\1\11\2\1\2\11"+
    "\1\1\1\11\2\1\1\11\3\0\1\11\32\1\11\11"+
    "\1\1\3\0\32\1\2\0\32\1\1\0\24\1\1\0"+
    "\13\1\1\0\6\1\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;
    boolean zzEOFDone;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, 
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /* user code: */
  private StringBuilder string = new StringBuilder();
  private ComplexSymbolFactory sf;
  private Configuration config;
  private LogManager logger;
  private final List<Path> scannedFiles = new ArrayList<Path>();
  private final Deque<Path> filesStack = new ArrayDeque<Path>();

  public AutomatonScanner(java.io.InputStream r, Path file, Configuration config, LogManager logger, ComplexSymbolFactory sf) {
    this(r);
    filesStack.push(file);
    this.sf = sf;
    this.config = config;
    this.logger = logger;
  }
   
  private Path getFile(String pYytext) throws FileNotFoundException {
    assert pYytext.startsWith("#include ");
    String fileName = pYytext.replaceFirst("#include ", "").trim();
    
    Path file = Paths.get(fileName);
    if (!file.isAbsolute()) {
      Path currentFile = filesStack.peek();
      file = Paths.get(currentFile.getParent().getPath(), file.getPath());    
    }

    if (scannedFiles.contains(file)) {
      logger.log(Level.WARNING, "File \"" + file + "\" was referenced multiple times. Redundant or cyclic references were ignored.");
      return null;
    }

    Files.checkReadableFile(file);
    scannedFiles.add(file);
    filesStack.push(file);
    return file;
  }
  
  private Location getStartLocation() {
    return new Location(filesStack.peek().getPath(), yyline+1,yycolumn+1-yylength());
  }

  private Location getEndLocation() {
    return new Location(filesStack.peek().getPath(), yyline+1,yycolumn+1);
  }
  
  private Symbol symbol(String name, int sym) {
    return sf.newSymbol(name, sym, getStartLocation(), getEndLocation());
  }

  private Symbol symbol(String name, int sym, String val) {
    return sf.newSymbol(name, sym, getStartLocation(), getEndLocation(), val);
  }
  
  private void error(String message) {
    logger.log(Level.WARNING, message + " near " + getStartLocation() + " - " + getEndLocation());
    throw new RuntimeException("Syntax error");
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AutomatonScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AutomatonScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }
    
    // numRead < 0) 
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { return symbol("AUTOMATON", AutomatonSym.AUTOMATON);
          }
        case 61: break;
        case 2: 
          { /* ignore */
          }
        case 62: break;
        case 21: 
          { yybegin(YYINITIAL); 
                                   return symbol("CURLYEXPR", AutomatonSym.CURLYEXPR, 
                                   string.toString());
          }
        case 63: break;
        case 55: 
          { return symbol("INITIAL", AutomatonSym.INITIAL);
          }
        case 64: break;
        case 6: 
          { return symbol(":", AutomatonSym.COLON);
          }
        case 65: break;
        case 41: 
          { return symbol("ERROR", AutomatonSym.ERROR);
          }
        case 66: break;
        case 42: 
          { return symbol("BREAK", AutomatonSym.BREAK);
          }
        case 67: break;
        case 14: 
          { return symbol("!", AutomatonSym.EXCLAMATION);
          }
        case 68: break;
        case 25: 
          { return symbol("!=", AutomatonSym.NEQ);
          }
        case 69: break;
        case 29: 
          { string.append('\t');
          }
        case 70: break;
        case 28: 
          { return symbol("||", AutomatonSym.OR);
          }
        case 71: break;
        case 11: 
          { string.setLength(0); yybegin(STRING);
          }
        case 72: break;
        case 10: 
          { return symbol("COMMA", AutomatonSym.COMMA);
          }
        case 73: break;
        case 49: 
          { return symbol("ASSUME", AutomatonSym.ASSUME);
          }
        case 74: break;
        case 43: 
          { return symbol("STATE", AutomatonSym.STATE);
          }
        case 75: break;
        case 35: 
          { return symbol("TRUE", AutomatonSym.TRUE);
          }
        case 76: break;
        case 9: 
          { return symbol("-", AutomatonSym.MINUS);
          }
        case 77: break;
        case 30: 
          { string.append('"');
          }
        case 78: break;
        case 31: 
          { string.append('\\');
          }
        case 79: break;
        case 38: 
          { return symbol("STOP", AutomatonSym.STOP);
          }
        case 80: break;
        case 57: 
          { return symbol("OBSERVER", AutomatonSym.OBSERVER);
          }
        case 81: break;
        case 19: 
          { string.append('\r');
          }
        case 82: break;
        case 50: 
          { return symbol("ASSERT", AutomatonSym.ASSERT);
          }
        case 83: break;
        case 5: 
          { return symbol(";", AutomatonSym.SEMICOLON);
          }
        case 84: break;
        case 18: 
          { yybegin(YYINITIAL); 
                                   return symbol("STRING", AutomatonSym.STRING_LITERAL, 
                                   string.toString());
          }
        case 85: break;
        case 46: 
          { return symbol("LOCAL", AutomatonSym.LOCAL);
          }
        case 86: break;
        case 8: 
          { return symbol(")", AutomatonSym.CLOSE_BRACKETS);
          }
        case 87: break;
        case 40: 
          { return symbol("MATCH", AutomatonSym.MATCH);
          }
        case 88: break;
        case 12: 
          { string.setLength(0); yybegin(CURLYEXPR);
          }
        case 89: break;
        case 26: 
          { return symbol("==", AutomatonSym.EQEQ);
          }
        case 90: break;
        case 54: 
          { return symbol("CONTROL", AutomatonSym.CONTROL);
          }
        case 91: break;
        case 45: 
          { return symbol("LABEL", AutomatonSym.LABEL);
          }
        case 92: break;
        case 58: 
          { Path file = getFile(yytext()); 
          if (file != null) {
            yypushStream(file.asCharSource(StandardCharsets.US_ASCII).openBufferedStream());
          }
          }
        case 93: break;
        case 51: 
          { return symbol("USEALL", AutomatonSym.USEALL);
          }
        case 94: break;
        case 23: 
          { return symbol("->", AutomatonSym.ARROW);
          }
        case 95: break;
        case 48: 
          { return symbol("FALSE", AutomatonSym.FALSE);
          }
        case 96: break;
        case 27: 
          { return symbol("&&", AutomatonSym.AND);
          }
        case 97: break;
        case 44: 
          { return symbol("EVAL", AutomatonSym.CHECK);
          }
        case 98: break;
        case 37: 
          { return symbol("EXIT", AutomatonSym.EXIT);
          }
        case 99: break;
        case 4: 
          { return symbol("INT", AutomatonSym.INTEGER_LITERAL, yytext());
          }
        case 100: break;
        case 33: 
          { string.append(']');
          }
        case 101: break;
        case 56: 
          { return symbol("USEFIRST", AutomatonSym.USEFIRST);
          }
        case 102: break;
        case 24: 
          { return symbol("DO", AutomatonSym.DO);
          }
        case 103: break;
        case 53: 
          { return symbol("MODIFY", AutomatonSym.MODIFY);
          }
        case 104: break;
        case 1: 
          { error("Illegal character <"+yytext()+">");
          }
        case 105: break;
        case 52: 
          { return symbol("TARGET", AutomatonSym.TARGET);
          }
        case 106: break;
        case 16: 
          { return symbol("+", AutomatonSym.PLUS);
          }
        case 107: break;
        case 32: 
          { string.append('}');
          }
        case 108: break;
        case 7: 
          { return symbol("(", AutomatonSym.OPEN_BRACKETS);
          }
        case 109: break;
        case 13: 
          { string.setLength(0); yybegin(SQUAREEXPR);
          }
        case 110: break;
        case 60: 
          { return symbol("IS_TARGET_STATE", AutomatonSym.IS_TARGET_STATE);
          }
        case 111: break;
        case 20: 
          { string.append('\n');
          }
        case 112: break;
        case 3: 
          { return symbol("ID", AutomatonSym.IDENTIFIER, yytext());
          }
        case 113: break;
        case 22: 
          { yybegin(YYINITIAL); 
                                   return symbol("CURLYEXPR", AutomatonSym.SQUAREEXPR, 
                                   string.toString());
          }
        case 114: break;
        case 36: 
          { return symbol("EVAL", AutomatonSym.EVAL);
          }
        case 115: break;
        case 39: 
          { return symbol("GOTO", AutomatonSym.GOTO);
          }
        case 116: break;
        case 15: 
          { return symbol("=", AutomatonSym.EQ);
          }
        case 117: break;
        case 17: 
          { string.append( yytext() );
          }
        case 118: break;
        case 47: 
          { return symbol("PRINT", AutomatonSym.PRINT);
          }
        case 119: break;
        case 34: 
          { return symbol("LABEL", AutomatonSym.END);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                if (yymoreStreams()) { yypopStream(); filesStack.pop(); } else return symbol("EOF", AutomatonSym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
