#
#  CPAchecker is a tool for configurable software verification.
#  This file is part of CPAchecker.
#
#  Copyright (C) 2007-2020  Dirk Beyer
#  All rights reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
#  CPAchecker web page:
#    http://cpachecker.sosy-lab.org
#
analysis.checkCounterexamples = false
analysis.threadOperationsTransform = true
analysis.traversal.order=bfs
analysis.traversal.useThreadModularOrdering = true
analysis.useThreadModularWrapper = true

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = false

cpa.callstack.skipRecursion = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.threadmodular.ThreadModularCPA
ThreadModularCPA.cpa = cpa.blockator.BlockatorCPATM
NotBAMCPATM.cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
# cpa = cpa.composite.CompositeCPA
# CompositeCPA.cpas = cpa.thread.ThreadCPA, cpa.lock.LockCPA, cpa.predicate.PredicateCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.thread.ThreadCPA, cpa.lock.LockCPA, cpa.value.ValueAnalysisCPA

cpa.location.enableStatesWithEdges=true
analysis.summaryEdges = true

# this automaton defines which locations are the error locations
specification = specification/default.spc

# output.coverage = false
coverage.enabled = false
cfa.export = false
# cpa.arg.export = false
# cpa.arg.errorPath.export = true
report.export = false

analysis.algorithm.CEGAR               = true
cegar.refiner                          = cpa.value.refiner.ValueAnalysisRefiner

cfa.threads.threadCreate = pthread_create
cfa.threads.threadJoin = pthread_join

