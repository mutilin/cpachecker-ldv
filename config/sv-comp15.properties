# ----------------------------------------------------------------------
# This configuration file uses a sequential combination
# of three different analyses, namely a value analysis,
# a bounded model checking analysis with k-induction,
# and a predicate analysis, in a total of six different
# configurations.
# This configuration file also specifies the configuration
# to be used for reachability properties on recursive
# programs and for properties regarding memory safety.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'15
specification = specification/sv-comp.spc

# The file to which the counterexample is written (required by competition).
cpa.arg.errorPath.file = ErrorPath.txt

# Disable all output except the error path.
output.disable = true

# Disable statistics for memory consumption.
statistics.memory = false

# Use multi-edges for efficiency reasons.
cfa.useMultiEdges = true

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# The analyses used for (non-recursive) reachability properties.
restartAlgorithm.configFiles = sv-comp15--01-valueAnalysis.properties, sv-comp15--02-bmc-k-induction.properties, sv-comp15--03-valueAnalysis-itp.properties, sv-comp15--04-predicateAnalysis.properties, sv-comp15--05-predicateAnalysis-ABElf.properties::if-interrupted, sv-comp15--06-predicateAnalysis-bitprecise.properties

# The analyses used for recursive reachability properties.
# TODO: to be added later

# The analyses used for memory safety properties.
# (everything in this file is then ignored).
memorysafety.config = sv-comp15--memorysafety.properties

# skip (non-explicit) recursion
# TODO: I guess analysis for recursion is targeted at categoy Recursion, right?
# TODO: do we wanna have that again in 2015? Evaluate!
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true
