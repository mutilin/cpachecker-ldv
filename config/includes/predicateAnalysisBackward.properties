
# analysis.algorithm.predicatedAnalysis = true
cpa.composite.inPredicatedAnalysis=true

analysis.checkCounterexamples = false
cpa.arg.errorPath.export = false

cpa.predicate.direction = BACKWARD
analysis.initialStatesFor = TARGET, EXIT 
analysis.partitionInitialStates = true

analysis.algorithm.CEGAR = true
cegar.refiner = cpa.predicate.PredicateRefiner
cpa.predicate.refinement.performInitialStaticRefinement = false

cpa.predicate.handlePointerAliasing = false
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true
cfa.useMultiEdges = false

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPABackwards, cpa.callstack.CallstackCPABackwards, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

specification = ../specification/default.spc

#include resource-limits.properties


[cpa.predicate]
# Setting the option to make memory allocations always return correct addresses
memoryAllocationsAlwaysSucceed = true

[analysis.traversal]
order = bfs
useReversePostorder = false
usePostorder = true
useCallstack = true

