# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate abstraction with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et.al.).
# It is configured for abstractions at loop heads, similar to LBE but
# with function inlining.
# This configuration works best on most examples,
# but may have memory problems on really big programs.
# ----------------------------------------------------------------------

# only paths to error locations are analyzed
# REMOVE THIS IF YOU DON'T HAVE "Label: ERROR" IN YOUR PROGRAM!
cfa.removeIrrelevantForErrorLocations = true

# topsort is better than dfs if elements may be merged
# callstack is necessary for inlining to work well
analysis.traversal = bfs
analysis.traversal.useTopsort = true
analysis.traversal.useCallstack = true

analysis.useAssumptionCollector = true

analysis.useRefinement = true

cegar.refiner = cpa.predicate.PredicateRefiner

# ARTCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.art.ARTCPA

ARTCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.assumptions.progressobserver.ProgressObserverCPA

ProgressObserverCPA.cpa.assumptions.progressobserver.heuristics = TimeOutHeuristics, MemoryOutHeuristics
TimeOutHeuristics.threshold = 1800000
MemoryOutHeuristics.threshold = 1800

# this automaton defines which locations are the error locations
specification = test/config/automata/ErrorLocationAutomaton.txt

cpa.predicate.blk.functions = false
cpa.predicate.blk.loops     = true
cpa.predicate.checkBlockFeasibility = true
