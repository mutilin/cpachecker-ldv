# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

#analysis.useCBMC = true
#analysis.useRefinement = true

analysis.entryFunction = ldv_main

output.disable = true

#parser.dialect = GNUC

#cpa.predicate.solver=SMTInterpol

#cegar.refiner = cpa.predicate.ABMPredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.boundedrecursion.BoundedRecursionCPA

BoundedRecursionCPA.cpa = cpa.abm.ABMLockCPA

ABMLockCPA.cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.functionpointercreate.FunctionPointerCreateCPA

FunctionPointerCreateCPA.cpa = cpa.usageStatistics.UsageStatisticsCPA

UsageStatisticsCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.lockStatistics.LockStatisticsCPA

cpa.arg.export = false
cpa.arg.errorPath.export = false

# this automaton defines which locations are the error locations
specification = config/specification/default.spc

cpa.abm.blockHeuristic = FunctionPartitioning
cpa.abm.gatherCacheMissStatistics = false
cpa.abm.aggressiveCaching = true

# Set time limit to 15 minutes
#cpa.conditions.global.time.wall = 15min

#if we don't presize the annotation, CPA thinks, that this function restores all locks.
cpa.lockStatistics.annotate = threadGet, mqSend, kernDispatchThread, memFree

annotate.kernDispatchThread.free = kernDispatchDisable
annotate.kernDispatchThread.restore = intLock

annotate.memFree.restore = pthread_mutex_lock

cpa.lockStatistics.lockinfo = intLock, queLOCK, kernDispatchDisable, pthread_mutex_lock, threadLock

intLock.lock = intLock
intLock.unlock = intUnlock
intLock.maxDepth = 2

queLOCK.lock = queLOCK
queLOCK.queLOCK.parameters = 1
queLOCK.unlock = queUNLOCK
queLOCK.queUNLOCK.parameters = 1
queLOCK.maxDepth = 2

kernDispatchDisable.lock = kernDispatchDisable
kernDispatchDisable.unlock = kernDispatchEnable
kernDispatchDisable.reset = kernBlockThreadAtCP
kernDispatchDisable.setlevel = kernDISPATCH_SET_LEVEL
kernDispatchDisable.maxDepth = 2

pthread_mutex_lock.lock = pthread_mutex_lock
pthread_mutex_lock.pthread_mutex_lock.parameters = 1
pthread_mutex_lock.unlock = pthread_mutex_unlock
pthread_mutex_lock.pthread_mutex_unlock.parameters = 1
pthread_mutex_lock.maxDepth = 2

threadLock.lock = threadLock
threadLock.unlock = threadUnlock
threadLock.maxDepth = 2

cpa.lockStatistics.lockreset = lockreset

cpa.usagestatistics.output = test/results/

cpa.usagestatistics.fullstatistics = false

cpa.usagestatistics.process = Simple

#cpa.usagestatistics.onlypointers = false

cpa.usagestatistics.analizedfunctions = sdlFirst, sdlInsert, sdlNext, memNODE_TO_HDR, memHDR_TO_NODE, memNEXT_HDR, memPREV_HDR, memHDR_TO_BLK, memBLK_TO_HDR, sdlExtractNext, sdlExtract, sdlAppend, ddlExtract, ddlGetFirst, ddlAppend, sdlGetFirst, sdlInitEmpty, memREGION_ADDRESS

cpa.usagestatistics.annotatedvariables = threadNestLevel

#cpa.usagestatistics.skippedvariables = errno

sdlFirst.parameters = 1
sdlFirst.pInfo = READ
sdlFirst.linkInfo = 0, 1

sdlInsert.parameters = 3
sdlInsert.pInfo = WRITE, READ, READ

sdlNext.parameters = 1
sdlNext.pInfo = READ
sdlNext.linkInfo = 0, 1

sdlInitEmpty.parameters = 1
sdlInitEmpty.pInfo = WRITE

memNODE_TO_HDR.parameters = 1
memNODE_TO_HDR.pInfo = READ
memNODE_TO_HDR.linkInfo = 0, 1

memHDR_TO_NODE.parameters = 1
memHDR_TO_NODE.pInfo = READ
memHDR_TO_NODE.linkInfo = 0, 1

memNEXT_HDR.parameters = 1
memNEXT_HDR.pInfo = READ
memNEXT_HDR.linkInfo = 0, 1

memPREV_HDR.parameters = 1
memPREV_HDR.pInfo = READ
memPREV_HDR.linkInfo = 0, 1

memHDR_TO_BLK.parameters = 1
memHDR_TO_BLK.pInfo = READ
memHDR_TO_BLK.linkInfo = 0, 1

memBLK_TO_HDR.parameters = 1
memBLK_TO_HDR.pInfo = READ
memBLK_TO_HDR.linkInfo = 0, 1

memREGION_ADDRESS.parameters = 2
memREGION_ADDRESS.pInfo = READ, READ

sdlExtractNext.parameters = 2
sdlExtractNext.pInfo = WRITE, WRITE

sdlExtract.parameters = 2
sdlExtract.pInfo = WRITE, READ

sdlAppend.parameters = 2
sdlAppend.pInfo = WRITE, WRITE

sdlGetFirst.parameters = 1
sdlGetFirst.pInfo = WRITE
sdlGetFirst.linkInfo = 0, 1

ddlExtract.parameters = 1
ddlExtract.pInfo = READ

ddlGetFirst.parameters = 1
ddlGetFirst.pInfo = READ
ddlGetFirst.linkInfo = 0, 1

ddlAppend.parameters = 2
ddlAppend.pInfo = WRITE, WRITE

#cpa.lockStatistics.functionhandler = OS

#cpa.usagestatistics.covering = true

cpa.usagestatistics.path = /home/alpha/git/cpachecker/test/cil.out.i

cpa.usagestatistics.skippedfunctions = sdlFirst, sdlInsert, sdlNext, memNODE_TO_HDR, memHDR_TO_NODE, memNEXT_HDR, memPREV_HDR, memHDR_TO_BLK, memBLK_TO_HDR, sdlExtractNext, sdlExtract, sdlAppend, ddlExtract, ddlGetFirst, ddlAppend, sdlGetFirst, sdlInitEmpty, memREGION_ADDRESS

#log.consoleLevel = ALL

