# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
# analysis.traversal.useReversePostorder = false
analysis.traversal.useCallstack = true
# analysis.traversal.useCallstack = false
analysis.functionPointerCalls = false
precision.path = localsave
analysis.summaryEdges = true

# analysis.useCBMC = true
# analysis.useRefinement = true

analysis.entryFunction = ldv_main

output.disable = false

cpa.callstack.skipRecursion = true

coverage.export = true
coverage.file = coverage.info

# parser.dialect = GNUC

# cpa.predicate.solver=SMTInterpol

# cegar.refiner = cpa.predicate.ABMPredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.abm.ABMLockCPA

ABMLockCPA.cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.usagestatistics.UsageStatisticsCPA

UsageStatisticsCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.lockstatistics.LockStatisticsCPA

cpa.arg.export = false
cpa.arg.errorPath.export = false

# cpa.explicit.initialPrecisionFile = initialExplicitPrecision_lock

# cpa.composite.precAdjust               = COMPONENT
# analysis.useRefinement                 = true
# cegar.refiner                          = cpa.explicit.refiner.DelegatingExplicitRefiner
# this automaton defines which locations are the error locations
# specification = config/specification/default.spc

cpa.abm.blockHeuristic = FunctionPartitioning
cpa.abm.gatherCacheMissStatistics = false
cpa.abm.aggressiveCaching = true

# Set time limit to 15 minutes
# cpa.conditions.global.time.wall = 15min

# if we don't presize the annotation, CPA thinks, that this function restores all locks.
cpa.lockStatistics.annotate = threadGet, threadSuspend, mqSend, kernDispatchThread, memFree, memAlloc, vfprintf, selwakeup, ldbBreakpoint, tsleep, hshInsertNode, hshRemoveId, __pthread_join, readdir_internal, vfs_busy, sync, vn_lock, vrele, qportMsgTakeOut, vput, readdir_internal, mqReceive, mtxUnlockCompletion, pthread_mutex_lock, mtxUnlock, pthread_mutex_getprioceiling, pthread_mutex_setprioceiling, validateMemPool, nsTxStart, mtxGetObject, objIdToAdrShared, sigKillDispEnabled, objActivate, objSetNameOnID, PartitionModeIdle, __partRestart, pthread_mutex_destroy, cndInitializer, cndGetObject, apause
annotate.threadGet.lock = kernDispatchDisable
annotate.mqSend.restore = kernDispatchDisable

# if-lock.
annotate.mtxUnlockCompletion.restore = kernDispatchDisable

# this lock is local, and should be destroyed after function exit
annotate.mqReceive.reset = queLOCK(que

annotate.threadSuspend.restore = kernDispatchDisable

annotate.kernDispatchThread.reset = kernDispatchDisable
annotate.kernDispatchThread.restore = intLock

# Bug, but now we annotate it
annotate.ldbBreakpoint.free = intLock

# Condition: if we can use lock, lock it and then unlock
annotate.memFree.restore = pthread_mutex_lock(&poolId->mp_sem
annotate.memAlloc.restore = pthread_mutex_lock(&poolId->mp_sem, kernDispatchDisable

# Here used local variable to lock, but there is no unlock function
annotate.vfprintf.free = pthread_mutex_lock(&fp->_mutex

# Equal conditions to lock/unlock
annotate.selwakeup.restore = kernDispatchDisable

# Exit with conditional relock
annotate.tsleep.restore = spl

# Exit if we can't catch the lock
annotate.readdir_internal.free = pthread_mutex_lock(&pdir->dd_mtx

# If this lock is locked, we free it and then lock again
annotate.vfs_busy.restore = simple_lock(interlkp

# Strange: only unlock in this function. May be, bug.
# annotate.panic.restore = spl

# May be, bug, Think.
annotate.__pthread_join.reset = queLOCK(&theThread->m_join

# May be, bug: two locks and one unlock
annotate.sync.free = simple_lock(&mountlist_slock

# Not free lock, if there was an error (one branch)
annotate.vn_lock.free = simple_lock(&vp->v_interlock
annotate.vrele.free = simple_lock(&vp->v_interlock
annotate.vput.free = simple_lock(&vp->v_interlock

# assert (threadDispatchLevel = 0)
annotate.qportMsgTakeOut.reset = kernDispatchDisable

# if-lock and unlock
annotate.nsTxStart.free = intLock
# if we can't lock - return.
annotate.readdir_internal.restore = pthread_mutex_lock(&pdir->dd_mtx

# there are no unlock, when error occures, but in such case there are no lock
annotate.pthread_mutex_lock.free = kernDispatchDisable
annotate.mtxUnlock.free = kernDispatchDisable
annotate.pthread_mutex_getprioceiling.free = kernDispatchDisable
annotate.pthread_mutex_setprioceiling.free = kernDispatchDisable
annotate.validateMemPool.free = kernDispatchDisable
annotate.pthread_mutex_destroy.restore = kernDispatchDisable

# they catch locks in success finishing
annotate.mtxGetObject.lock = kernDispatchDisable
annotate.objIdToAdrShared.lock = kernDispatchDisable

# if-lock and unlock
annotate.sigKillDispEnabled.restore = kernDispatchDisable
# annotate._memAlloc.restore = kernDispatchDisable, mtxLock(pPool->mp_lock
# annotate.memPoolDelete.restore = kernDispatchDisable, mtxLock(pPool->mp_lock
# annotate._memFree.restore = kernDispatchDisable, mtxLock(pPool->mp_lock
annotate.objActivate.restore = kernDispatchDisable
annotate.objSetNameOnID.restore = hshLock(hshId, mtxLock(pMtx

# 'evil hack': only modLinkPageInternal->mlp_DispatchLevel without special macros
annotate.PartitionModeIdle.restore = kernDispatchDisable
annotate.__partRestart.free = kernDispatchDisable

# several branches
annotate.cndGetObject.lock = kernDispatchDisable

# if-lock
annotate.apause.restore = simple_lock(&lkp->lk_interlock
cpa.lockStatistics.lockinfo = intLock, queLOCK, kernDispatchDisable, pthread_mutex_lock, threadLock, sblock, simple_lock, spl, rblock, hshLock, mtxLock, memPool_lock, mlp_Dispatch

mlp_Dispatch.variable = modLinkPageInternal->mlp_DispatchLevel
mlp_Dispatch.maxDepth = 3

intLock.lock = intLock, modCall
intLock.unlock = intUnlock
intLock.maxDepth = 2

queLOCK.lock = queLOCK
queLOCK.queLOCK.parameters = 1
queLOCK.unlock = queUNLOCK, queUnlockDpc
queLOCK.queUNLOCK.parameters = 1
queLOCK.queUnlockDpc.parameters = 1
queLOCK.maxDepth = 2

kernDispatchDisable.lock = kernDispatchDisable
kernDispatchDisable.unlock = kernDispatchEnable, memPOOL_UNLOCK
# kernDispatchDisable.reset = kernBlockThreadAtCP
kernDispatchDisable.setlevel = kernDISPATCH_SET_LEVEL
kernDispatchDisable.variable = threadDispatchLevel
kernDispatchDisable.maxDepth = 3

pthread_mutex_lock.lock = pthread_mutex_lock, mtxLock
pthread_mutex_lock.pthread_mutex_lock.parameters = 1
pthread_mutex_lock.reset = pthread_mutex_destroy
pthread_mutex_lock.unlock = pthread_mutex_unlock, mtxUnlock
pthread_mutex_lock.pthread_mutex_unlock.parameters = 1
pthread_mutex_lock.mtxUnlock.parameters = 1
pthread_mutex_lock.pthread_mutex_trylock.parameters = 1
pthread_mutex_lock.pthread_mutex_timedlock.parameters = 1
pthread_mutex_lock.maxDepth = 2

mtxLock.lock = mtxLockInternal
mtxLock.mtxLockInternal.parameters = 1
mtxLock.unlock = mtxUnlockInternal
mtxLock.mtxUnlockInternal.parameters = 1
mtxLock.maxDepth = 2

threadLock.lock = threadLock
threadLock.unlock = threadUnlock
threadLock.maxDepth = 2

sblock.lock = sblock
sblock.unlock = sbunlock
sblock.sblock.parameters = 1
sblock.sbunlock.parameters = 1
sblock.maxDepth = 2

simple_lock.lock = simple_lock, simple_lock_try
# simple_unlock reset all locks (even if there were several simple_lock before)
simple_lock.reset = simple_unlock
simple_lock.simple_lock.parameters = 1
simple_lock.simple_lock_try.parameters = 1
simple_lock.simple_unlock.parameters = 1
simple_lock.maxDepth = 2

spl.lock = splnet, splimp, splvm, splhigh, splsoftclock, splbio
spl.unlock = spl0, splx
spl.maxDepth = 4

rblock.lock = rbLOCK, rbLOCKDD
rblock.unlock = rbUNLOCK, rbUNLOCKDD
rblock.rbLOCK.parameters = 1
rblock.rbLOCKDD.parameters = 1
rblock.rbUNLOCK.parameters = 1
rblock.rbUNLOCKDD.parameters = 1
rblock.maxDepth = 2

# semaphore.lock = sem_wait, sem_trywait, sem_timedwait, semTimedwait
# semaphore.unlock = sem_post
# semaphore.sem_wait.parameters = 1
# semaphore.sem_trywait.parameters = 1
# semaphore.sem_timedwait.parameters = 1
# semaphore.semTimedwait.parameters = 1
# semaphore.sem_post.parameters = 1
# semaphore.maxDepth = 3

hshLock.lock = hshLock
hshLock.unlock = hshUnlock
hshLock.hshLock.parameters = 1
hshLock.hshUnlock.parameters = 1

memPool_lock.lock = memPOOL_LOCK
memPool_lock.memPOOL_LOCK.parameters = 1
memPool_lock.unlock = memPOOL_UNLOCK
memPool_lock.memPOOL_UNLOCK.parameters = 1
memPool_lock.maxDepth = 2

cpa.lockStatistics.lockreset = lockreset

cpa.usagestatistics.output = unsafe_rawdata
cpa.usagestatistics.abortfunctions = __exit, pthread_exit, HealthMonitor, panic, Shutdown, cpuShutdown, hmReportError

# cpa.usagestatistics.fullstatistics = false

cpa.usagestatistics.unsafeDetectorType = PAIR

# cpa.usagestatistics.onlypointers = false

cpa.usagestatistics.binderFunctions = sdlFirst, sdlInsert, sdlNext, memNODE_TO_HDR, memHDR_TO_NODE, memNEXT_HDR, memPREV_HDR, memHDR_TO_BLK, memBLK_TO_HDR, sdlExtractNext, sdlExtract, sdlAppend, ddlExtract, ddlGetFirst, ddlAppend, ddlMove, ddlInit, ddlInsert, sdlGetFirst, sdlInitEmpty, memREGION_ADDRESS, mfree_annotated

cpa.usagestatistics.unsafedetector.detectByReadAccess = threadNestLevel

cpa.usagestatistics.localanalysis = true

cpa.usagestatistics.skippedvariables = errno, threadExecuting

sdlFirst.parameters = 1
sdlFirst.pInfo = READ:1
sdlFirst.linkInfo = 0, 1

sdlInsert.parameters = 3
sdlInsert.pInfo = WRITE:1, WRITE:1, WRITE:1

sdlNext.parameters = 1
sdlNext.pInfo = READ:1
sdlNext.linkInfo = 0, 1

sdlInitEmpty.parameters = 1
sdlInitEmpty.pInfo = WRITE:1

memNODE_TO_HDR.parameters = 1
memNODE_TO_HDR.pInfo = READ:1
memNODE_TO_HDR.linkInfo = 0, 1

memHDR_TO_NODE.parameters = 1
memHDR_TO_NODE.pInfo = READ:0
memHDR_TO_NODE.linkInfo = 0, 1

memNEXT_HDR.parameters = 1
memNEXT_HDR.pInfo = READ:0
memNEXT_HDR.linkInfo = 0, 1

memPREV_HDR.parameters = 1
memPREV_HDR.pInfo = READ:1
memPREV_HDR.linkInfo = 0, 1

memHDR_TO_BLK.parameters = 1
memHDR_TO_BLK.pInfo = READ:0
memHDR_TO_BLK.linkInfo = 0, 1

memBLK_TO_HDR.parameters = 1
memBLK_TO_HDR.pInfo = READ:0
memBLK_TO_HDR.linkInfo = 0, 1

memREGION_ADDRESS.parameters = 2
memREGION_ADDRESS.pInfo = READ, READ

sdlExtractNext.parameters = 2
sdlExtractNext.pInfo = WRITE:1, WRITE:1

sdlExtract.parameters = 2
sdlExtract.pInfo = WRITE:1, READ:1

sdlAppend.parameters = 2
sdlAppend.pInfo = WRITE:1, WRITE:1

sdlGetFirst.parameters = 1
sdlGetFirst.pInfo = WRITE:1
sdlGetFirst.linkInfo = 0, 1

ddlExtract.parameters = 1
ddlExtract.pInfo = WRITE:1

ddlGetFirst.parameters = 1
ddlGetFirst.pInfo = WRITE:1
ddlGetFirst.linkInfo = 0, 1

ddlInsert.parameters = 2
ddlInsert.pInfo = WRITE:1, WRITE:1

ddlAppend.parameters = 2
ddlAppend.pInfo = WRITE:1, WRITE:1

ddlMove.parameters = 2
ddlMove.pInfo = WRITE:1, WRITE:1
ddlMove.linkInfo = 1, 2

ddlInit.parameters = 4
ddlInit.pInfo = WRITE:1, READ:1, READ:0, READ:0

mfree_annotated.parameters = 2
mfree_annotated.pInfo = WRITE:1, WRITE:1

# cpa.lockStatistics.functionhandler = OS

# cpa.usagestatistics.covering = true

cpa.usagestatistics.skippedfunctions = sdlFirst, sdlInsert, sdlNext, memNODE_TO_HDR, memHDR_TO_NODE, memNEXT_HDR, memPREV_HDR, memHDR_TO_BLK, memBLK_TO_HDR, sdlExtractNext, sdlExtract, sdlAppend, ddlExtract, ddlGetFirst, ddlAppend, sdlGetFirst, sdlInitEmpty, memREGION_ADDRESS, mfree_annotated

# log.consoleLevel = ALL

