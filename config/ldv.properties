# ------------------------------------------------------------------
# This configuration file uses explicit analysis of integer
# variables in a model-checking configuration.
# CBMC is used to cross-check counterexamples.
# This configuration makes use of a CEGAR approach, by only tracking
# variables that are found, via interpolation, to be relevant to the
# error.
# To counter the imprecision of the explicit domain, a predicate
# analysis in the ABE-lf configuration is used to increase the
# precision.
# Furthemore, variables that have more then 22 distinct values along
# a path are dropped in the subsequent path exploration.
# ------------------------------------------------------------------

#include explicitAnalysis-ItpRefiner-ABElf.properties

CompositeCPA.cpas       = cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.functionpointer.FunctionPointerCPA,cpa.value.ValueAnalysisCPA,cpa.predicate.PredicateCPA,cpa.conditions.global.GlobalConditionsCPA,cpa.conditions.path.PathConditionsCPA

# this automaton defines which locations are the error locations
specification = config/specification/sv-comp.spc

# drop variables from abstract state once they have more then 22 distinct assignments along the current path
cpa.conditions.path.condition                 = AssignmentsInPathCondition

# rev.10385 which added capabilities for a soft and a hard thresholds instead of a single threshold 
cpa.conditions.path.assignments.softThreshold = 0

# rev.8272 of CPAchecker has added support for global structure initializations
# it has negative effect for drivers, so switch it off
cpa.value.interpolation.ignoreLoopsExitAssumes = false

output.disable         = true
statistics.memory      = false
cpa.arg.errorPath.file = ErrorPath.txt

# Set 64-bit machine model
analysis.machineModel = Linux64

# Disable counterexample double-check with CBMC
analysis.checkCounterexamples = false

# Turn on Immutable CFA 3
analysis.summaryEdges = true
analysis.functionPointerCalls = true
cpa.callstack.skipRecursion = true

# Set several custom (LDV-specific) nondet functions
cpa.predicate.nondetFunctions = nondet_int,sscanf,random,ldv_undef_ptr,ldv_undef_int,ldv_undef_ulong

# Ignore function calls by pointer if the value of pointer variable is not known by FunctionPointerCPA
cpa.functionpointer.ignoreUnknownFunctionPointerCalls=true

# Pointer analysis with UF options
cpa.predicate.handlePointerAliasing = true

cpa.predicate.defaultArrayLength = 1
cpa.predicate.maxArrayLength = 1


# Setting the option to make memory allocations always return correct addresses
cpa.predicate.memoryAllocationsAlwaysSucceed = false

# New heuristic for cillified files: pre-populate small structures with all their fields
cpa.predicate.maxPreFilledAllocationSize = 0

