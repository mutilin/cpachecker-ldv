# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
# analysis.traversal.useReversePostorder = false
analysis.traversal.useCallstack = true
# analysis.traversal.useCallstack = false
analysis.functionPointerCalls = false
precision.path = localsave
analysis.reachedSet = USAGESTATISTICS

# analysis.useCBMC = true
# analysis.useRefinement = true

analysis.entryFunction = ldv_main

cpa.arg.export = false
cpa.arg.errorPath.export = false

output.disable = true
analysis.algorithm.CEGAR = true
cpa.callstack.skipRecursion = true

coverage.output = coverage.info

# parser.dialect = GNUC

# cpa.predicate.solver=SMTInterpol

# cegar.refiner = cpa.predicate.ABMPredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.bam.BAMCPA

BAMCPA.cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.usagestatistics.UsageStatisticsCPA

UsageStatisticsCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.lockstatistics.LockStatisticsCPA, cpa.predicate.BAMPredicateCPA
cegar.refiner = cpa.usagestatistics.UsageStatisticsRefiner
cegar.refinementLoops = 0

cpa.usagestatistics.outputType = MULTIPLE_FILES

# this automaton defines which locations are the error locations
# specification = config/specification/default.spc

cpa.abm.blockHeuristic = FunctionPartitioning
cpa.abm.gatherCacheMissStatistics = false
cpa.abm.aggressiveCaching = false

# Set time limit to 15 minutes
# cpa.conditions.global.time.wall = 15min

cpa.lockStatistics.lockinfo = mutex_lock, spin_lock

# mutex_lock.lock = mutex_lock, mutex_lock_nested
# mutex_lock.mutex_lock_nested.parameters = 1
# mutex_lock.mutex_lock.parameters = 1
# mutex_lock.unlock = mutex_unlock
# mutex_lock.mutex_unlock.parameters = 1
mutex_lock.lock = ldv_mutex_lock
mutex_lock.ldv_mutex_lock.parameters = 2
mutex_lock.unlock = ldv_mutex_unlock
mutex_lock.ldv_mutex_unlock.parameters = 2
mutex_lock.maxDepth = 2

# spin_lock.lock = __ldv_spin_lock
# spin_lock.unlock = __ldv_spin_unlock
spin_lock.lock = ldv_spin_lock
spin_lock.ldv_spin_lock.parameters = 2
spin_lock.unlock = ldv_spin_unlock
spin_lock.ldv_spin_unlock.parameters = 2
spin_lock.maxDepth = 2

# cpa.lockStatistics.lockreset = lockreset

cpa.usagestatistics.output = unsafe_rawdata
cpa.usagestatistics.abortfunctions = __exit, pthread_exit, HealthMonitor, panic

# cpa.usagestatistics.fullstatistics = false

cpa.usagestatistics.unsafeDetectorType = PAIR

# cpa.usagestatistics.onlypointers = false

cpa.usagestatistics.binderFunctions = INIT_LIST_HEAD, list_add, list_add_tail, list_del, list_replace, list_replace_init, list_del_init, list_move, list_move_tail, list_is_last, list_empty, ldv_list_get_first, ldv_list_is_stop, ldv_list_get_next


cpa.usagestatistics.unsafedetector.detectByReadAccess = threadNestLevel

cpa.usagestatistics.localanalysis = true

cpa.usagestatistics.unsafedetector.ignoreEmptyLockset = true

# cpa.usagestatistics.skippedvariables.byName = errno
cpa.usagestatistics.skippedvariables.byType = struct ath_tx_stats

INIT_LIST_HEAD.parameters = 1
INIT_LIST_HEAD.pInfo = WRITE:1

list_add.parameters = 2
list_add.pInfo = WRITE:1, WRITE:1
# first parameter (new) --> {redirect to} --> second parameter (list head)
list_add.linkInfo = 1, 2

list_add_tail.parameters = 2
list_add_tail.pInfo = WRITE:1, WRITE:1
list_add_tail.linkInfo = 1, 2

list_del.parameters = 1
list_del.pInfo = WRITE:1

list_replace.parameters = 2
list_replace.pInfo = WRITE:1, WRITE:1
list_replace.linkInfo = 2, 1

list_replace_init.parameters = 2
list_replace_init.pInfo = WRITE:1, WRITE:1
list_replace_init.linkInfo = 2, 1

list_del_init.parameters = 1
list_del_init.pInfo = WRITE:1

list_move.parameters = 2
list_move.pInfo = WRITE:1, WRITE:1
list_move.linkInfo = 1, 2

list_move_tail.parameters = 2
list_move_tail.pInfo = WRITE:1, WRITE:1
list_move_tail.linkInfo = 1, 2

list_is_last.parameters = 2
list_is_last.pInfo = READ:1, READ:1

list_empty.parameters = 1
list_empty.pInfo = READ:1

ldv_list_get_first.parameters = 1
ldv_list_get_first.pInfo = READ:1
ldv_list_get_first.linkInfo = 0, 1

ldv_list_is_stop.parameters = 2
ldv_list_is_stop.pInfo = READ:1, READ:1

ldv_list_get_next.parameters = 1
ldv_list_get_next.pInfo = READ:1
ldv_list_get_next.linkInfo = 0, 1

# cpa.lockStatistics.functionhandler = OS

cpa.usagestatistics.covering = true

cpa.usagestatistics.skippedfunctions = sdlFirst, sdlInsert, sdlNext, memNODE_TO_HDR, memHDR_TO_NODE, memNEXT_HDR, memPREV_HDR, memHDR_TO_BLK, memBLK_TO_HDR, sdlExtractNext, sdlExtract, sdlAppend, ddlExtract, ddlGetFirst, ddlAppend, sdlGetFirst, sdlInitEmpty, memREGION_ADDRESS, mfree_annotated

# log.consoleLevel = ALL
#include predicateAnalysis.properties
