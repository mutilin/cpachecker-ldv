# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

#analysis.useCBMC = true
#analysis.useRefinement = true

analysis.entryFunction = ldv_main

output.disable = true

#parser.dialect = GNUC

#cpa.predicate.solver=SMTInterpol

#cegar.refiner = cpa.predicate.ABMPredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.abm.ABMLockCPA
ABMLockCPA.cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.functionpointercreate.FunctionPointerCreateCPA

FunctionPointerCreateCPA.cpa = cpa.usageStatistics.UsageStatisticsCPA

UsageStatisticsCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.conditions.global.GlobalConditionsCPA, cpa.lockStatistics.LockStatisticsCPA

cpa.arg.export = false
cpa.arg.errorPath.export = false

# this automaton defines which locations are the error locations
specification = /home/alpha/git/cpachecker/config/specification/default.spc

cpa.abm.blockHeuristic = FunctionPartitioning
cpa.abm.gatherCacheMissStatistics = false
cpa.abm.aggressiveCaching = true

# Set time limit to 15 minutes
#cpa.conditions.global.time.wall = 15min

cpa.lockStatistics.lockfunctions = intLock, queLock, kernDispatchDisable

cpa.lockStatistics.unlockfunctions = intUnlock, queUnlock, kernDispatchEnable

cpa.lockStatistics.exceptions = intLock, intUnlock, kernDispatchDisable, kernDispatchEnable

cpa.usagestatistics.output = test/race_results.txt

cpa.usagestatistics.fullstatistics = true

cpa.usagestatistics.process = Simple

#cpa.usagestatistics.onlypointers = false

cpa.lockStatistics.functionhandler = OS

cpa.usagestatistics.covering = false

#log.consoleLevel = ALL

