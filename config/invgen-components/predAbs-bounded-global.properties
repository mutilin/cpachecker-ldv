# --------------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR.
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for abstractions at loop heads, similar to LBE but
# with function inlining.
# Abstractions are stored as formulas (not as BDDs) and the refinement
# process is the one from the tool Impact from McMillan,
# which was presented in the paper "Lazy Abstraction with Interpolants"
# --------------------------------------------------------------------------

#include ../includes/predicateAnalysis-ABEl.properties

[analysis.algorithm]
conditionAdjustment = true

[cegar]
refiner = cpa.predicate.PredicateGlobalRefiner
globalRefinement = true

[]
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.bounds.BoundsCPA, cpa.functionpointer.FunctionPointerCPA,  cpa.predicate.PredicateCPA

# don't break on target states we use a global refiner
cpa.automaton.breakOnTargetState = 0

[cpa.bounds]
maxLoopIterations = 1
maxLoopIterationsUpperBound = 10
maxLoopIterationAdjusterFactory = INCREMENT

[cpa.predicate]
predmap.export = true
predmap.file = precisionFor2nd.txt

[]
# witness export seems to be broken in combination with
# global refinement and a bounded analysis
counterexample.export.enabledWitness=false

# this should be a lightweight invariant generation approach
# so 10 seconds should be more than enough
limits.time.cpu=10s
