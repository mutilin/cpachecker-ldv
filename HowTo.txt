CPAchecker Installation Requirements

Requirements for executing CPAchecker:
0. Sources have to be preprocessed by CIL
   (http://hal.cs.berkeley.edu/cil/, mirror at http://www.cs.berkeley.edu/~necula/cil/).
   Necessary flags:
   --dosimplify --printCilAsIs --save-temps --domakeCFG
   Possibly necessary flags:
   --dosimpleMem
   Comments:
   --save-temps saves files to the current directory, a different directory can
   be specified by using --save-temps=<DIRECTORY>

Building CPAchecker:
--------------------
1. Install Java 1.6 SDK or higher (OpenJDK 6 works, too).
   http://java.sun.com/
2. Checkout CPAchecker from SVN repository.
   URL: http://svn.sosy-lab.org/software/cpachecker/trunk
3. Install ant (anything since version 1.6 should be ok).
   The optional ant tasks are needed (in Ubuntu they are packaged as ant-optional).
4. Run "ant" in CPAchecker directory to build CPAchecker.

Running CPAchecker:
-------------------
5. Choose a source code file that you want to be checked.
   Several types of example programs can be found in test/programs/
   If you use your own program, remember to pre-process it with CIL (see above).
   Example: test/programs/simple/loop1.c
6. Choose a configuration file. This file defines for example which CPAs are used.
   Standard configuration files can be found in the directory test/config/.
   Example: test/config/explicitAnalysisInf.properties
   The configuration options used in this file are explained in HowToConfiguration.txt.
7. Choose a specification file (you may not need this for some CPAs).
   The standard configuration files use test/config/automata/ErrorLocationAutomaton.txt
   as the default specification. With this one, CPAchecker will look for labels
   named "ERROR" and assertions in the source code file.
   Other examples for specifications can be found in test/config/automata/.
8. Execute "scripts/cpa.sh -config <CONFIG_FILE> [ -spec <SPEC_FILE> ] <SOURCE_FILE>"
   The specification is optional if already specified in the configuration file.
   The current directory should be the CPAchecker project directory.
   Additional command line switches are described in HowToConfiguration.txt.
   Example: scripts/cpa.sh -config test/config/explicitAnalysisInf.properties test/programs/simple/loop1.c
9. Additionally to the console output, there will be several output files in test/output/:
     ART.dot: Visualization of abstract reachability tree (Graphviz format)
     cfa*.dot: Visualization of control flow automaton (Graphviz format)
     counterexample.msat: Formula representation of the error path
     ErrorPath.txt: A path through the program that leads to an error
     ErrorPathAssignment.txt: Assignments for all variables on the error path.
     predmap.txt: Predicates used by predicate analysis to prove program safety
     reached.txt: Dump of all reached abstract states
   Note that not all of these files will be available for all configurations.
   Also some of these files are only produced if an error is found (or vice-versa).
   CPAchecker will overwrite files in this directory!
   These files may be used to generate a report that can be viewed in a browser.
   See HowToBuildReport.txt for this.

Running test cases:
-------------------
1. Build CPAchecker as described above.
2. You need ant-junit.jar (on Debian/Ubuntu included in the package ant-optional).
3. Run "ant tests" from the project root directory. The output (including the test
   results) will be in test/output/.

Building and running CPAchecker from within Eclipse:
----------------------------------------------------
1. Install Eclipse 3.5 or 3.6 with JDT.
   http://www.eclipse.org/
2. You need an SVN plugin for Eclipse, e.g. SubClipse (http://subclipse.tigris.org,
   Eclipse update site: http://subclipse.tigris.org/update_1.6.x)
   (Eclipse update site: http://subclipse.tigris.org/update_1.6.x)
   Create new project from SVN repository
   URL: http://svn.sosy-lab.org/software/cpachecker/trunk
3. Ignore warnings "Unsatisfied version constraint: 'org.eclipse.cdt.core ...'"
   and "Bundle 'org.eclipse.cdt.core' cannot be resolved'".
4. Follow the instructions in section "Running CPAchecker", but instead of step 8
   create an Eclipse run configuration with main class "org.sosy_lab.cpachecker.cmdline.CPAMain",
   program arguments "-config <CONFIG_FILE> [ -spec <SPEC_FILE> ] <SOURCE_FILE>"
   and VM arguments "-Djava.library.path=lib/native/<ENVIRONMENT>"
   Replace <ENVIRONMENT> with one of the following depending on your system:
   		ppc-macosx, x86_64-linux, x86-linux, x86-macosx,  x86-win32

Using CPAchecker as an Eclipse plugin for your C projects
---------------------------------------------------------
1. Add the URL http://www.sosy-lab.org/~dbeyer/eclipse-download/ as an update site to Eclipse.
2. Install CPAclipse plugin.

Using CPAchecker as an Eclipse plugin for your C projects (for CPAchecker developers)
-------------------------------------------------------------------------------------
1. You need Eclipse 3.5 with CDT 6 and the Eclipse Plugin Development Environment.
   (Eclipse 3.6 is currently not supported). Also install an SVN plugin.
2. Create an Eclipse project for CPAchecker as described above.
3. Create an Eclipse project for CPAclipse from the SVN repository
   URL: http://svn.sosy-lab.org/software/cpachecker/trunk/plugin/CPAclipse
4. If there are warnings about missing bundles, you don't have CDT in the correct version.
5. Run the CPAclipse project as an "Eclipse Application".


Troubleshooting:
----------------
- Libraries are missing.
  Error (example): "libgmpxx.so.4: cannot open shared object file: No such file or directory"
  Solution: Install the missing library ('libgmpxx4ldbl' in this case on debian/ubuntu systems)


Examples of working installation:
db 2008-11-28:
0. x86 32bit
1. Java 1.6.0_10
2. Eclipse 3.4.1 (Ganymede)
3. CDT 4.0.3

pwendler 2009-08-25:
0. x86 32bit Linux
1. Sun Java 1.6.0_14
2. Eclipse 3.5.0 (Galileo)
4. CDT 6.0.0

pwendler 2010-10-01
0. x64 Linux
1. OpenJDK 1.6.0_18
2. Eclipse 3.6.0 (Helios)
4. no CDT
