
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// [date omitted]
//----------------------------------------------------

package org.sosy_lab.cpachecker.cpa.automaton;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import org.sosy_lab.common.LogManager;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.common.configuration.Configuration;
import java.util.logging.Level;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version [date omitted]
  */
@SuppressWarnings(value = { "all" }) public  class AutomatonParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AutomatonParser() {super();}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\006\011\000" +
    "\002\005\006\000\002\007\004\000\002\007\002\000\002" +
    "\014\006\000\002\014\010\000\002\010\004\000\002\010" +
    "\002\000\002\015\007\000\002\016\003\000\002\016\003" +
    "\000\002\016\002\000\002\011\004\000\002\011\002\000" +
    "\002\017\011\000\002\017\010\000\002\017\010\000\002" +
    "\012\004\000\002\012\002\000\002\020\004\000\002\013" +
    "\004\000\002\013\002\000\002\021\006\000\002\021\004" +
    "\000\002\021\011\000\002\021\010\000\002\022\004\000" +
    "\002\022\002\000\002\024\003\000\002\024\005\000\002" +
    "\024\003\000\002\024\005\000\002\024\005\000\002\025" +
    "\003\000\002\025\011\000\002\025\010\000\002\023\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\005\000\002\026\004\000\002\026\011\000" +
    "\002\026\010\000\002\026\006\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\011\000\002\027" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\014\002\uffff\015\007\016\012\017\013\027" +
    "\011\001\002\000\014\002\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\027\ufffe\001\002\000\004\010\233\001\002\000\014\002" +
    "\uffff\015\007\016\012\017\013\027\011\001\002\000\004" +
    "\040\116\001\002\000\004\002\115\001\002\000\024\004" +
    "\027\013\017\030\020\032\032\033\030\040\031\041\033" +
    "\047\022\050\025\001\002\000\004\015\007\001\002\000" +
    "\004\015\007\001\002\000\014\002\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\027\ufffa\001\002\000\014\002\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\027\ufffb\001\002\000\014\002\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\027\ufffc\001\002\000\024\004\027\013" +
    "\017\030\020\032\032\033\030\040\031\041\033\047\022" +
    "\050\025\001\002\000\014\026\110\031\105\051\107\052" +
    "\111\053\106\001\002\000\066\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\013\uffdd\014\uffdd\024\uffdd\025\uffdd\027" +
    "\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000\062\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\013\uffd4\014\uffd4\024" +
    "\uffd4\025\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\044" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002\000\012\042\073" +
    "\044\074\045\071\046\072\001\002\000\066\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\024\uffd8" +
    "\025\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\001\002\000" +
    "\062\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\013\uffd3" +
    "\014\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\044\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002\000" +
    "\032\005\061\006\064\010\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042\062\044\063\001" +
    "\002\000\024\004\027\013\017\030\020\032\032\033\030" +
    "\040\031\041\033\047\022\050\025\001\002\000\004\013" +
    "\047\001\002\000\066\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\013\uffdb\014\uffdb\024\uffdb\025\uffdb\027\uffdb\030" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\001\002\000\004\013\034\001\002" +
    "\000\066\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\013" +
    "\uffd5\014\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\001\002\000\006\040\035\051\036\001\002\000" +
    "\006\011\040\013\041\001\002\000\004\014\037\001\002" +
    "\000\062\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\013" +
    "\uffc3\014\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3\001\002" +
    "\000\004\051\045\001\002\000\004\051\042\001\002\000" +
    "\004\014\043\001\002\000\004\014\044\001\002\000\062" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\013\uffc5\014" +
    "\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\044\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\004" +
    "\014\046\001\002\000\062\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\013\uffc4\014\uffc4\024\uffc4\025\uffc4\027\uffc4" +
    "\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\001\002\000\004\040\050\001\002\000\006\011" +
    "\051\013\052\001\002\000\004\051\056\001\002\000\004" +
    "\051\053\001\002\000\004\014\054\001\002\000\004\014" +
    "\055\001\002\000\066\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\013\uffd7\014\uffd7\024\uffd7\025\uffd7\027\uffd7\030" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\001\002\000\004\014\057\001\002" +
    "\000\066\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\013" +
    "\uffd6\014\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\001\002\000\062\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\013\uffd2\014\uffd2\024\uffd2\025\uffd2\027\uffd2" +
    "\030\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\001\002\000\024\004\027\013\017\030\020\032" +
    "\032\033\030\040\031\041\033\047\022\050\025\001\002" +
    "\000\024\004\027\013\017\030\020\032\032\033\030\040" +
    "\031\041\033\047\022\050\025\001\002\000\024\004\027" +
    "\013\017\030\020\032\032\033\030\040\031\041\033\047" +
    "\022\050\025\001\002\000\024\004\027\013\017\030\020" +
    "\032\032\033\030\040\031\041\033\047\022\050\025\001" +
    "\002\000\062\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\013\uffcb\014\uffcb\024\uffcb\025\uffcb\027\uffcb\030\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\062\044\063\047\uffcb\050\uffcb\051\uffcb\001" +
    "\002\000\062\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\013\uffce\014\uffce\024\uffce\025\uffce\027\uffce\030\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\044\uffce\047\uffce\050\uffce\051\uffce\001" +
    "\002\000\062\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\013\uffcd\014\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd\001" +
    "\002\000\062\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\013\uffcc\014\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\062\044\063\047\uffcc\050\uffcc\051\uffcc\001" +
    "\002\000\012\013\075\033\030\040\031\041\033\001\002" +
    "\000\012\013\075\033\030\040\031\041\033\001\002\000" +
    "\012\013\075\033\030\040\031\041\033\001\002\000\012" +
    "\013\075\033\030\040\031\041\033\001\002\000\012\013" +
    "\075\033\030\040\031\041\033\001\002\000\066\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0\014\uffd0\024" +
    "\uffd0\025\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044" +
    "\uffd0\045\071\046\072\047\uffd0\050\uffd0\051\uffd0\001\002" +
    "\000\006\045\071\046\072\001\002\000\014\014\101\042" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\001\002\000\066\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\013\uffdc\014\uffdc\024" +
    "\uffdc\025\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\066\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\013" +
    "\uffcf\014\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\045\071\046\072\047\uffcf\050\uffcf" +
    "\051\uffcf\001\002\000\066\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\013\uffd9\014\uffd9\024\uffd9\025\uffd9\027\uffd9" +
    "\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\001\002\000\066\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\013\uffda\014\uffda\024\uffda" +
    "\025\uffda\027\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\001\002\000" +
    "\004\053\112\001\002\000\062\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\013\uffc8\014\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\044\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\001\002\000\062\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\013\uffca\014\uffca\024\uffca\025\uffca\027" +
    "\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca\047\uffca\050" +
    "\uffca\051\uffca\001\002\000\062\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\013\uffc6\014\uffc6\024\uffc6\025\uffc6\027" +
    "\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\001\002\000\062\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\013\uffc9\014\uffc9\024\uffc9\025\uffc9\027" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\001\002\000\062\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\013\uffc7\014\uffc7\024\uffc7\025\uffc7\027" +
    "\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\001\002\000\014\005\061\006\064\014\114" +
    "\042\062\044\063\001\002\000\062\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\013\uffd1\014\uffd1\024\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\001\002\000\004\002\000\001\002\000" +
    "\006\021\117\022\ufff6\001\002\000\004\040\224\001\002" +
    "\000\006\021\117\022\ufff6\001\002\000\004\022\122\001" +
    "\002\000\004\023\220\001\002\000\006\020\ufff2\023\126" +
    "\001\002\000\004\020\216\001\002\000\006\020\ufff2\023" +
    "\126\001\002\000\010\040\uffee\054\130\055\127\001\002" +
    "\000\004\040\ufff0\001\002\000\004\040\uffef\001\002\000" +
    "\004\040\132\001\002\000\004\012\133\001\002\000\030" +
    "\004\027\013\017\020\uffec\023\uffec\030\020\032\032\033" +
    "\030\040\031\041\033\047\022\050\025\001\002\000\030" +
    "\004\027\013\017\020\uffec\023\uffec\030\020\032\032\033" +
    "\030\040\031\041\033\047\022\050\025\001\002\000\014" +
    "\005\061\006\064\007\137\042\062\044\063\001\002\000" +
    "\006\020\ufff1\023\ufff1\001\002\000\020\024\uffe7\025\uffe7" +
    "\027\011\034\uffe7\035\uffe7\036\uffe7\037\uffe7\001\002\000" +
    "\020\024\uffe7\025\uffe7\027\011\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\001\002\000\016\024\uffe4\025\uffe4\034\146\035" +
    "\142\036\143\037\uffe4\001\002\000\004\040\210\001\002" +
    "\000\042\004\027\013\017\024\uffde\025\uffde\030\020\032" +
    "\032\033\175\034\uffde\035\uffde\036\uffde\037\uffde\040\031" +
    "\041\033\047\022\050\025\051\171\001\002\000\016\024" +
    "\uffe4\025\uffe4\034\146\035\142\036\143\037\uffe4\001\002" +
    "\000\010\024\160\025\161\037\162\001\002\000\004\013" +
    "\147\001\002\000\004\040\150\001\002\000\006\011\151" +
    "\013\152\001\002\000\004\051\156\001\002\000\004\051" +
    "\153\001\002\000\004\014\154\001\002\000\004\014\155" +
    "\001\002\000\016\024\uffe1\025\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\001\002\000\004\014\157\001\002\000\016" +
    "\024\uffe0\025\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\001" +
    "\002\000\004\010\166\001\002\000\004\010\165\001\002" +
    "\000\004\040\163\001\002\000\004\010\164\001\002\000" +
    "\030\004\uffeb\013\uffeb\020\uffeb\023\uffeb\030\uffeb\032\uffeb" +
    "\033\uffeb\040\uffeb\041\uffeb\047\uffeb\050\uffeb\001\002\000" +
    "\030\004\uffe9\013\uffe9\020\uffe9\023\uffe9\030\uffe9\032\uffe9" +
    "\033\uffe9\040\uffe9\041\uffe9\047\uffe9\050\uffe9\001\002\000" +
    "\030\004\uffea\013\uffea\020\uffea\023\uffea\030\uffea\032\uffea" +
    "\033\uffea\040\uffea\041\uffea\047\uffea\050\uffea\001\002\000" +
    "\010\024\uffe5\025\uffe5\037\uffe5\001\002\000\016\024\uffe2" +
    "\025\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\001\002\000" +
    "\042\004\uffc0\013\uffc0\024\uffc0\025\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002\000\042\004\027" +
    "\013\017\024\uffde\025\uffde\030\020\032\032\033\175\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\031\041\033\047\022" +
    "\050\025\051\171\001\002\000\052\004\uffc2\013\uffc2\024" +
    "\uffc2\025\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffc2\050\uffc2\051\uffc2\001\002\000\052" +
    "\004\uffc1\005\061\006\064\013\uffc1\024\uffc1\025\uffc1\030" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\062\044\063\047\uffc1\050\uffc1\051" +
    "\uffc1\001\002\000\004\013\176\001\002\000\004\040\177" +
    "\001\002\000\006\011\200\013\201\001\002\000\004\051" +
    "\205\001\002\000\004\051\202\001\002\000\004\014\203" +
    "\001\002\000\004\014\204\001\002\000\052\004\uffbf\013" +
    "\uffbf\024\uffbf\025\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffbf\050\uffbf\051\uffbf\001\002" +
    "\000\004\014\206\001\002\000\052\004\uffbe\013\uffbe\024" +
    "\uffbe\025\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffbe\050\uffbe\051\uffbe\001\002\000\016" +
    "\024\uffdf\025\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\001" +
    "\002\000\004\043\211\001\002\000\012\013\075\033\030" +
    "\040\031\041\033\001\002\000\022\024\uffe3\025\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\045\071\046\072\001\002" +
    "\000\016\024\uffe8\025\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\001\002\000\006\020\uffed\023\uffed\001\002\000\004" +
    "\020\ufff3\001\002\000\004\015\217\001\002\000\014\002" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\027\ufff9\001\002\000\004" +
    "\040\221\001\002\000\004\010\222\001\002\000\006\020" +
    "\ufff8\023\ufff8\001\002\000\004\022\ufff7\001\002\000\004" +
    "\040\225\001\002\000\006\010\227\043\226\001\002\000" +
    "\004\041\033\001\002\000\006\021\ufff5\022\ufff5\001\002" +
    "\000\004\010\231\001\002\000\006\021\ufff4\022\ufff4\001" +
    "\002\000\004\002\001\001\002\000\014\002\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\027\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\014\002\007\003\005\004\003\006\013\020" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\231\003\005\004\003\006\013\020\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\020\024\023" +
    "\025\022\026\025\001\001\000\004\006\015\001\001\000" +
    "\004\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\020\024\077\025\022\026" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\020\024\023\025\022" +
    "\026\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\020\024\023\025\022\026\067\001\001\000" +
    "\012\023\020\024\023\025\022\026\066\001\001\000\012" +
    "\023\020\024\023\025\022\026\065\001\001\000\012\023" +
    "\020\024\023\025\022\026\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\020\024\023\025\103\001\001\000\010\023\020" +
    "\024\023\025\102\001\001\000\010\023\020\024\023\025" +
    "\101\001\001\000\010\023\020\024\023\025\075\001\001" +
    "\000\010\023\020\024\077\025\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\120" +
    "\014\117\001\001\000\002\001\001\000\006\007\222\014" +
    "\117\001\001\000\004\005\122\001\001\000\002\001\001" +
    "\000\006\010\123\015\124\001\001\000\002\001\001\000" +
    "\006\010\214\015\124\001\001\000\004\016\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\135\017\133\023\020\024\023" +
    "\025\022\026\134\001\001\000\016\011\213\017\133\023" +
    "\020\024\023\025\022\026\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\140\020\137\001\001\000" +
    "\006\012\212\020\137\001\001\000\006\013\144\021\143" +
    "\001\001\000\002\001\001\000\016\022\167\023\020\024" +
    "\172\025\022\026\173\027\171\001\001\000\006\013\166" +
    "\021\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\022" +
    "\206\023\020\024\172\025\022\026\173\027\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\020\024\023\025\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AutomatonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AutomatonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AutomatonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


  /* this map is used to collect the local variables. It is then passed to each "VarAccess" and "Assignment" Expression.
   * ( I don't want to pass the Variable-Instance directly, because it might be defined after the Expression in the input Document.)
   */
  protected Map<String, AutomatonVariable> variablesMap;
  public boolean syntaxErrors;
  AutomatonScanner scanner;
  LogManager logger;
  // this int is used to determine unique names for anonymous automata
  private static int anonymousCounter;

  public AutomatonParser(AutomatonScanner scanner, SymbolFactory sf, LogManager pLogger) {
      super(scanner, sf);
      this.scanner = scanner;
      this.logger = pLogger;
      initVariablesMap();
  }
  void initVariablesMap() {
  	this.variablesMap = new HashMap<String, AutomatonVariable>();
  }
  @Override
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    String errorString = message;
    errorString = errorString + " Line: " + (scanner.getLine()+1) + " Column: " + scanner.getColumn();

    if (info instanceof Symbol) {
    	Symbol symbol = (Symbol) info;
    	if (!( symbol.left < 0 || symbol.right < 0 ))
    		errorString = errorString + "\n at line "+symbol.left+", column "+symbol.right;
    }
    logger.log(Level.INFO, errorString);
  }
  
  Automaton generateSkeletonForAssertion(AutomatonBoolExpr pA) throws InvalidAutomatonException {
    AutomatonTransition trans = new AutomatonTransition(
        AutomatonBoolExpr.TRUE, 
        Collections.singletonList(pA),
        Collections.<AutomatonAction>emptyList(),
        "OK");
    AutomatonInternalState okState = new AutomatonInternalState("OK", 
        Collections.singletonList(trans));
    Automaton ret = new Automaton("AnonymousAutomaton" + anonymousCounter++,
                                  Collections.<String, AutomatonVariable>emptyMap(), 
                                  Collections.singletonList(okState), "OK", logger);
    return ret;
  }
  /**
  * Parses a Specification File and returns the Automata found in the file.
  */
  public static List<Automaton> parseAutomatonFile(File pInputFile, Configuration config, LogManager pLogger) throws InvalidConfigurationException {
    SymbolFactory sf = new ComplexSymbolFactory();
    FileInputStream input = null;
    try {
      input = new FileInputStream(pInputFile);
      Symbol symbol = new AutomatonParser(new AutomatonScanner(input, config, pLogger, sf),sf, pLogger).parse();
      return ((List<Automaton>) symbol.value);
    } catch (Exception e) {
      pLogger.logException(Level.FINER, e, "Could not load automaton from file " + pInputFile.getAbsolutePath());
      throw new InvalidConfigurationException("Could not load automaton from file " + pInputFile.getAbsolutePath()
          + " (" + (e.getMessage() != null ? e.getMessage() : e.getClass().getSimpleName()) + ")");
    } finally {
      if (input!= null) {
        try {
          input.close();
        } catch (IOException e) {
          throw new InvalidConfigurationException(
              "IO Exception when closing the FileStream to \"" + pInputFile.getAbsolutePath() + "\": "+e.getMessage());
        }
      }
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$AutomatonParser$actions {
  private final AutomatonParser parser;

  /** Constructor */
  CUP$AutomatonParser$actions(AutomatonParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AutomatonParser$do_action(
    int                        CUP$AutomatonParser$act_num,
    java_cup.runtime.lr_parser CUP$AutomatonParser$parser,
    java.util.Stack            CUP$AutomatonParser$stack,
    int                        CUP$AutomatonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AutomatonParser$result;

      /* select the action based on the action number */
      switch (CUP$AutomatonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= EVAL OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonExpression RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonExpression RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= STRING_LITERAL 
            {
              AutomatonExpression RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonExpression.StringExpression(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= Bool 
            {
              AutomatonExpression RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= Int 
            {
              AutomatonExpression RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Bool ::= CHECK OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.ALLCPAQuery(query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bool ::= CHECK OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bool ::= CHECK OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bool ::= MATCH EXIT 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = new AutomatonBoolExpr.MatchProgramExit(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bool ::= MATCH LABEL SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchLabelRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bool ::= MATCH SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bool ::= MATCH CURLYEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeASTComparison(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool ::= MATCH STRING_LITERAL 
            {
              AutomatonBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeExact(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool ::= Bool OR Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Or(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool ::= Bool AND Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.And(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool ::= Bool NEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool ::= Bool EQEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool ::= InnerInt NEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool ::= InnerInt EQEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bool ::= OPEN_BRACKETS Bool CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bool ::= EXCLAMATION Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Negation(b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Bool ::= FALSE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.FALSE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bool ::= TRUE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.TRUE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ConstantInt ::= INTEGER_LITERAL 
            {
              AutomatonIntExpr.Constant RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Constant(c.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("ConstantInt",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InnerInt ::= EVAL OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InnerInt ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InnerInt ::= Int 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Int ::= InnerInt MINUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Minus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Int ::= InnerInt PLUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Plus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Int ::= IDENTIFIER 
            {
              AutomatonIntExpr RESULT =null;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.VarAccess(x.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Int ::= OPEN_BRACKETS Int CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Int ::= ConstantInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr.Constant c = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = c; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrintArguments ::= 
            {
              List<AutomatonExpression> RESULT =null;
		 RESULT = new LinkedList<AutomatonExpression>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PrintArguments ::= Expression PrintArguments 
            {
              List<AutomatonExpression> RESULT =null;
		AutomatonExpression a = (AutomatonExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonExpression> lst = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonAction RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonAction RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Action ::= PRINT PrintArguments 
            {
              AutomatonAction RESULT =null;
		List<AutomatonExpression> args = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Print(args); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Action ::= DO IDENTIFIER EQ InnerInt 
            {
              AutomatonAction RESULT =null;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Assignment(var.toString(), i); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Actions ::= 
            {
              List<AutomatonAction> RESULT =null;
		 RESULT = new LinkedList<AutomatonAction>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Actions ::= Action Actions 
            {
              List<AutomatonAction> RESULT =null;
		AutomatonAction a = (AutomatonAction)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonAction> lst = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Assertion ::= ASS Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertion",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Assertions ::= 
            {
              List<AutomatonBoolExpr> RESULT =null;
		 RESULT = new LinkedList<AutomatonBoolExpr>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assertions ::= Assertion Assertions 
            {
              List<AutomatonBoolExpr> RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonBoolExpr> lst = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Transition ::= Bool ARROW Assertions Actions STOP SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, AutomatonInternalState.BOTTOM); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Transition ::= Bool ARROW Assertions Actions ERROR SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, AutomatonInternalState.ERROR); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Transition ::= Bool ARROW Assertions Actions GOTO IDENTIFIER SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object follow = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonTransition(trigger, ass, acts, follow.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Transitions ::= 
            {
              List<AutomatonTransition> RESULT =null;
		 RESULT = new LinkedList<AutomatonTransition>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Transitions ::= Transition Transitions 
            {
              List<AutomatonTransition> RESULT =null;
		AutomatonTransition t = (AutomatonTransition)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonTransition> lst = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, t); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StateNonDetDef ::= 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateNonDetDef",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StateNonDetDef ::= USEALL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateNonDetDef",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StateNonDetDef ::= USEFIRST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateNonDetDef",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StateDef ::= STATE StateNonDetDef IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Boolean nd = (Boolean)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts, nd); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StateDefs ::= 
            {
              List<AutomatonInternalState> RESULT =null;
		 RESULT = new LinkedList<AutomatonInternalState>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StateDefs ::= StateDef StateDefs 
            {
              List<AutomatonInternalState> RESULT =null;
		AutomatonInternalState s = (AutomatonInternalState)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> lst = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, s); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER EQ ConstantInt SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		AutomatonIntExpr.Constant ci = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); RESULT.setValue(ci.getIntValue()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LocalDefs ::= 
            {
              Map<String,AutomatonVariable> RESULT =null;
		 RESULT = parser.variablesMap; /* RESULT = new HashMap<String, AutomatonVariable>(); */ 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LocalDefs ::= LocalDef LocalDefs 
            {
              Map<String,AutomatonVariable> RESULT =null;
		AutomatonVariable d = (AutomatonVariable)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		Map<String,AutomatonVariable> lst = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.put(d.getName(), d); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InitDef ::= INITIAL STATE IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = id.toString(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InitDef",3, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Body ::= AUTOMATON IDENTIFIER LocalDefs InitDef StateDefs END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		Map<String,AutomatonVariable> vars = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		String init = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonInternalState> states = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new Automaton(id.toString(), vars, states, init, parser.logger);
                 parser.initVariablesMap();
              
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Body",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Automaton ::= Body 
            {
              Automaton RESULT =null;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Automaton",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Automaton ::= CONTROL Body 
            {
              Automaton RESULT =null;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Automaton",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Automaton ::= OBSERVER Body 
            {
              Automaton RESULT =null;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; b.assertObserverAutomaton(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Automaton",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Specification ::= Assertion SEMICOLON 
            {
              Automaton RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = parser.generateSkeletonForAssertion(a); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Specification",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Specification ::= Automaton 
            {
              Automaton RESULT =null;
		Automaton a = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = a; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Specification",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= 
            {
              List<Automaton> RESULT =null;
		 RESULT = new LinkedList<Automaton>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		List<Automaton> start_val = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		RESULT = start_val;
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AutomatonParser$parser.done_parsing();
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= Specification initial 
            {
              List<Automaton> RESULT =null;
		Automaton s = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<Automaton> lst = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, s); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

