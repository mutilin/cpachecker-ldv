<?xml version="1.0"?>
<!DOCTYPE benchmark PUBLIC "+//IDN sosy-lab.org//DTD BenchExec benchmark 1.0//EN" "http://www.sosy-lab.org/benchexec/benchmark-1.0.dtd">
<!--
  Example file that demonstrates the use of CPAchecker.
  This file can and should be used as a base for building own benchmark definitions.
-->
<benchmark tool="cpachecker" timelimit="180" hardtimelimit="220">


<!-- benchmark tool="cpachecker" timelimit="1800" memlimit="2000"> -->
  <option name="-noout"/>
  <option name="-heap">1200M</option>
  <tasks name="ControlFlowInteger">
    <includesfile>../programs/benchmarks/ControlFlowInteger.set</includesfile>
  </tasks>
 <!--
  <tasks name="Simple">
    <includesfile>../programs/benchmarks/Simple.set</includesfile>
  </tasks>
  <tasks name="Loops">
    <includesfile>../programs/benchmarks/Loops.set</includesfile>
    <exclude>../programs/benchmarks/loops/eureka_01_false-unreach-call.i</exclude>  for_infinite_loop_1_true-unreach-label_false-termination.i
  </tasks>
  -->
 <!--
 <tasks name="Sequentialized">
    <includesfile>../programs/benchmarks/Sequentialized.set</includesfile>
  </tasks>
  <tasks name="Nested">
    <includesfile>nested.set</includesfile>
  </tasks>
  -->

  <!-- Global options for all run definitions. -->
  <!-- Set the Java heap size to some value lower than the memlimit. -->
  <option name="-heap">7000M</option>


  <!--
    Always use property files as specification
    to guarantee correct interpretation of the results.
    The following will use the file ALL.prp in the same directory as the source file.
  -->
  <propertyfile>${sourcefile_path}/ALL.prp</propertyfile>
  <!--
  <propertyfile>../programs/benchmarks/PropertyERROR.prp</propertyfile>
  -->


  <!--
  <rundefinition name="without-cbmc">
    <option name="-valueAnalysis-no-cbmc"/>
  </rundefinition>

  <rundefinition name="with-cbmc">
    <option name="-valueAnalysis"/>
  </rundefinition>
  -->

  <rundefinition name="testgen_automaton_controlled_stop_on_error_experiment1">
    <option name="-testGen"/>
    <option name="-setprop">testgen.stopOnError=true</option>
    <option name="-setprop">testgen.iterationStrategy=AUTOMATON_CONTROLLED</option>
    <option name="-setprop">testgen.analysisStrategy=BASIC_EXPERIMENT1</option>
  </rundefinition>

  <rundefinition name="testgen_automaton_controlled_stop_on_error">
    <option name="-testGen"/>
    <option name="-setprop">testgen.stopOnError=true</option>
    <option name="-setprop">testgen.iterationStrategy=AUTOMATON_CONTROLLED</option>
  </rundefinition>
    <rundefinition name="testgen_filtered_waitlist_stop_on_error">
    <option name="-testGen"/>
    <option name="-setprop">testgen.stopOnError=true</option>
    <option name="-setprop">testgen.iterationStrategy=SAME_ALGORITHM_FILTER_WAITLIST</option>
  </rundefinition>



  <!--
    Search the CPAchecker output for some values.
    The <column> tag has the pattern as content,
    and the script will try to extract a numerical value from matching lines.
    "numberOfDigits" gives the number of digits after the decimal separator,
    "title" the name of the column in the table.
    Both attributes are optional.
    These tags are not necessary here,
    statistics can still be extracted after the benchmark run.
  <columns>
    <column title="total" numberOfDigits="1">time for CPAchecker</column>
    <column title="reached">reached set</column>
  </columns>
  -->
</benchmark>
