# if we don't presize the annotation, CPA thinks, that this function restores all locks.
cpa.lockStatistics.annotate = threadGet, threadSuspend, mqSend, kernDispatchThread, memFree, memAlloc, vfprintf, selwakeup, ldbBreakpoint, tsleep, hshInsertNode, hshRemoveId, __pthread_join, readdir_internal, vfs_busy, sync, vn_lock, vrele, qportMsgTakeOut, vput, readdir_internal, mqReceive, mtxUnlockCompletion, pthread_mutex_lock, mtxUnlock, pthread_mutex_getprioceiling, pthread_mutex_setprioceiling, validateMemPool, nsTxStart, mtxGetObject, objIdToAdrShared, sigKillDispEnabled, objActivate, objSetNameOnID, PartitionModeIdle, __partRestart, pthread_mutex_destroy, cndInitializer, cndGetObject, apause, threadResume
annotate.threadGet.lock = kernDispatchDisable
annotate.mqSend.restore = kernDispatchDisable

# if-lock.
annotate.mtxUnlockCompletion.restore = kernDispatchDisable

# this lock is local, and should be destroyed after function exit
annotate.mqReceive.reset = queLOCK(que

annotate.threadSuspend.restore = kernDispatchDisable

# annotate.kernDispatchThread.reset = kernDispatchDisable
annotate.kernDispatchThread.restore = intLock

# Bug, but now we annotate it
annotate.ldbBreakpoint.free = intLock

# Condition: if we can use lock, lock it and then unlock
annotate.memFree.restore = pthread_mutex_lock(&poolId->mp_sem
annotate.memAlloc.restore = pthread_mutex_lock(&poolId->mp_sem, kernDispatchDisable

# Here used local variable to lock, but there is no unlock function
annotate.vfprintf.free = pthread_mutex_lock(&fp->_mutex

# Equal conditions to lock/unlock
annotate.selwakeup.restore = kernDispatchDisable

# Exit with conditional relock
annotate.tsleep.restore = spl

# Exit if we can't catch the lock
annotate.readdir_internal.free = pthread_mutex_lock(&pdir->dd_mtx

# If this lock is locked, we free it and then lock again
annotate.vfs_busy.restore = simple_lock(interlkp

# Strange: only unlock in this function. May be, bug.
# annotate.panic.restore = spl

# May be, bug, Think.
annotate.__pthread_join.reset = queLOCK(&theThread->m_join

# May be, bug: two locks and one unlock
annotate.sync.free = simple_lock(&mountlist_slock

# Not free lock, if there was an error (one branch)
annotate.vn_lock.restore = simple_lock(&vp->v_interlock
annotate.vrele.restore = simple_lock(&vp->v_interlock
annotate.vput.restore = simple_lock(&vp->v_interlock

# assert (threadDispatchLevel = 0)
annotate.qportMsgTakeOut.reset = kernDispatchDisable

# if-lock and unlock
annotate.nsTxStart.free = intLock
# if we can't lock - return.
annotate.readdir_internal.restore = pthread_mutex_lock(&pdir->dd_mtx

# there are no unlock, when error occures, but in such case there are no lock
annotate.pthread_mutex_lock.free = kernDispatchDisable
annotate.mtxUnlock.free = kernDispatchDisable
annotate.pthread_mutex_getprioceiling.free = kernDispatchDisable
annotate.pthread_mutex_setprioceiling.free = kernDispatchDisable
annotate.validateMemPool.free = kernDispatchDisable
annotate.pthread_mutex_destroy.restore = kernDispatchDisable

# they catch locks in success finishing
annotate.mtxGetObject.lock = kernDispatchDisable
annotate.objIdToAdrShared.lock = kernDispatchDisable

# if-lock and unlock
annotate.sigKillDispEnabled.restore = kernDispatchDisable
# annotate._memAlloc.restore = kernDispatchDisable, mtxLock(pPool->mp_lock
# annotate.memPoolDelete.restore = kernDispatchDisable, mtxLock(pPool->mp_lock
# annotate._memFree.restore = kernDispatchDisable, mtxLock(pPool->mp_lock
annotate.objActivate.restore = kernDispatchDisable
annotate.objSetNameOnID.restore = hshLock(hshId, mtxLock(pMtx

# 'evil hack': only modLinkPageInternal->mlp_DispatchLevel without special macros
annotate.PartitionModeIdle.restore = kernDispatchDisable
annotate.__partRestart.free = kernDispatchDisable

# several branches
annotate.cndGetObject.lock = kernDispatchDisable

# if-lock
annotate.apause.restore = simple_lock(&lkp->lk_interlock
# if-unlock
annotate.threadResume.restore = kernDispatchDisable 
