CPAchecker JSON API
===================
CPAchecker running on Google App Engine exposes a RESTful JSON API to create,
retrieve and delete jobs and other resources.

RESTful
-------
RESTful means that standard HTTP methods are used for CRUD operations on resources
and standard HTTP status codes are used to convey success/error states.

JSON format
----------
The JSON format (http://json.org/) is used for sending and retrieveing data.
Therefore any requests must set the following HTTP headers to successfully use
the JSON API:
Content-Type: application/json
Accept: application/json


General server errors
=====================
Sometimes the server cannot process a request and therefore returns a default
response according to the occured error.

Over Quota
----------
The request cannot be processed because one or more resource have depleted their
respective quota.

503 Service unavailable
{
  "status" : "OVER_QUOTA"
  "statusMessage" : "A resource has been depleted and no more requests can be processed."
}


Timeout
-------
The request was aborted because it took to long to process it.

500 Internal Server Error
{
  "status" : "TIMEOUT",
  "statusMessage" : "The request was aborted because it took too long to service it."
}


JSON Endpoints
==============
The following endpoints are provided as an API. They are described by the HTTP
method they accept, their URI, their request and respond format and header values.
A description is provided and an example request/response JSON entity.


# GET /settings
===============
Returns information about various settings and defaults used on App Engine.

Units:
- timeLimit: seconds

Response
--------
{
  "timeLimit" : "540",
  "statisticsFileName" : "Statistics.txt",
  "retries" : "1",
  "errorFileName" : "ERROR.txt",
  "cpacheckerVersion" : "1.3",
  "cpacheckerOnGAEVersion" : "10790M", 
  "CPUSpeed" : "600Mhz",
  "RAM" : "128M",
  "unsupportedConfigurations" : [
  	"chc.properties",
  	"lddAnalysis.properties"
  ],
  "configurations" : [
  	"bmc-induction.properties",
  	"bmc.properties"
  ],
  "defaultOptions" : {
  	"statistics.memory" : "false",
    "cpa.conditions.global.time.wall.hardlimit" : "-1",
    "log.consoleLevel" : "OFF"
  },
  "specifications" : [
  	"Assertion.spc",
  	"AssumptionGuidingAutomaton.spc"
  ]
}



# GET /tasks
===========
Returns a list of all jobs that are stored in the datastore.

Response
--------
[ {
  "creationDate" : "2014-02-01T14:57:25.746",
  "executionDate" : "2014-02-01T14:57:27.283",
  "terminationDate" : null,
  "status" : "RUNNING",
  "result" : null,
  "key" : "agZiYS1sYWJyCQsSA0pvYhgBDA"
} ]



# POST /tasks
============
Creates a new job.

Request
-------
201 Created
Location: [URI of the created job resource]

Optional:
  - options
  - sourceFileName
Required:
  - Either specification or configuration
  - programText

{
  "programText" : "...",
  "sourceFileName" : "example.c"
  "specification" : "sv-comp.spc",
  "configuration" : "explicitAnalysis.properties",
  "options" :
  {
    "output.disable" : "true",
    "statistics.export" : "true",
    "log.level" : "FINER",
    "analysis.machineModel" : "Linux32",
    "configuration.dumpFile" : ""UsedConfiguration.properties",
    "limits.time.wall" : "100",
    "gae.instanceType" : "FRONTEND"
  }
}

Errors
------
400 Bad Request

[
  "error.jsonNotWellFormed",
  "error.jsonNotMapped",
  "error.requestBodyNotRead",
  "error.specOrConfigMissing",
  "error.specificationNotFound",
  "error.configurationNotFound",
  "error.noProgram",
  "error.invalidLogLevel",
  "error.programTooLarge",
  "error.couldNotUpload",
  "error.invalidInstanceType"
]


# DELETE /tasks
==============
Deletes all jobs and their associated files and statistic.


# GET /tasks/{jobKey}
====================
Returns the job with the key {jobKey}.

Units:
- creationDate: UTC datetime
- executionDate: UTC datetime
- terminationDate: UTC datetime
- statistic: see GET /job/{jobKey}/statistics

Response
--------
{
  "creationDate" : "2014-02-01T15:02:56.215",
  "executionDate" : "2014-02-01T15:02:56.262",
  "terminationDate" : "2014-02-01T15:02:58.866",
  "status" : "DONE",
  "statusMessage" : null,
  "specification" : "sv-comp.spc",
  "configuration" : "explicitAnalysis.properties",
  "sourceFileName" : "example.c",
  "instanceType" : "FRONTEND",
  "retries" : 0,
  "result" : "TRUE",
  "resultMessage" : "TRUE. No property violation found by chosen configuration.",
  "options" : {
    "log.level" : "FINER",
    "output.disable" : "true"
  },
  "statistic" : {
    "host" : "",
    "latency" : 2630000,
    "key" : "agZiYS1sYWJyIgsSA0pvYhgDDAsSDEpvYlN0YXRpc3RpYxiAgICAgIDACgw",
    "CPUTime" : 0.0
  },
  "key" : "agZiYS1sYWJyCQsSA0pvYhgDDA",
  "files" : [ {
    "name" : "CPALog.txt",
    "key" : "agZiYS1sYWJyHQsSA0pvYhgDDAsSB0pvYkZpbGUYgICAgICAwAgM"
  }, {
    "name" : "example.c",
    "key" : "agZiYS1sYWJyHQsSA0pvYhgDDAsSB0pvYkZpbGUYgICAgICAgAkM"
  }, {
    "name" : "Statistics.txt",
    "key" : "agZiYS1sYWJyHQsSA0pvYhgDDAsSB0pvYkZpbGUYgICAgICAgAsM"
  } ]
}



# DELETE /tasks/{jobKey}
=======================
Deletes the job with the key {jobKey} and all associated files and statistic.


# GET /tasks/{jobKey}/statistics
==========================
Returns statistics about the job with the key {jobKey}.

Units:
- cost: US Dollar
- latency: microseconds
- endTime: microseconds since the Unix epoch
- startTime: microseconds since the Unix epoch
- pendingTime: microseconds
- CPUTime: seconds

Response
--------
{
  "job" : {
    "key" : "agZiYS1sYWJyCQsSA0pvYhgDDA"
  },
  "cost" : 0.0,
  "host" : "",
  "latency" : 2630000,
  "endTime" : 1391266978876000,
  "startTime" : 1391266976246000,
  "pendingTime" : 0,
  "key" : "agZiYS1sYWJyIgsSA0pvYhgDDAsSDEpvYlN0YXRpc3RpYxiAgICAgIDACgw",
  "CPUTime" : 0.0
}



# GET /tasks/{jobKey}/files/{fileKey}
====================================
Returns the file with the key {fileKey} belonging to the job with the key {jobKey}.

Response
--------
{
  "job" : {
    "key" : "agZiYS1sYWJyCQsSA0pvYhgDDA"
  },
  "name" : "CPALog.txt",
  "content" : "...",
  "key" : "agZiYS1sYWJyHQsSA0pvYhgDDAsSB0pvYkZpbGUYgICAgICAwAgM"
}




# GET /tasks/{jobKey}/files/{fileName}
======================================
Returns the content of the file with the name {fileName} belonging to the job
with the key {jobKey}.

Response
--------
Content-Type: text/plain
