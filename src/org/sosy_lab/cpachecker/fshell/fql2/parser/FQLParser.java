/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2011  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// [date omitted]
//----------------------------------------------------

package org.sosy_lab.cpachecker.fshell.fql2.parser;

import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;

import org.sosy_lab.cpachecker.fshell.fql2.ast.Edges;
import org.sosy_lab.cpachecker.fshell.fql2.ast.FQLSpecification;
import org.sosy_lab.cpachecker.fshell.fql2.ast.Nodes;
import org.sosy_lab.cpachecker.fshell.fql2.ast.Paths;
import org.sosy_lab.cpachecker.fshell.fql2.ast.Predicate;
import org.sosy_lab.cpachecker.fshell.fql2.ast.coveragespecification.Concatenation;
import org.sosy_lab.cpachecker.fshell.fql2.ast.coveragespecification.CoverageSpecification;
import org.sosy_lab.cpachecker.fshell.fql2.ast.coveragespecification.Quotation;
import org.sosy_lab.cpachecker.fshell.fql2.ast.coveragespecification.ScopePropagator;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.BasicBlockEntry;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Column;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Complement;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Compose;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.ConditionEdge;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.ConditionGraph;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.DecisionEdge;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.EnclosingScopes;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Expression;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.File;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Filter;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Function;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.FunctionCall;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.FunctionCalls;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.FunctionEntry;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.FunctionExit;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Identity;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Intersection;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Label;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Line;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Predication;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.RegularExpression;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.SetMinus;
import org.sosy_lab.cpachecker.fshell.fql2.ast.filter.Union;
import org.sosy_lab.cpachecker.fshell.fql2.ast.pathpattern.PathPattern;
import org.sosy_lab.cpachecker.util.predicates.simpleformulas.Constant;
import org.sosy_lab.cpachecker.util.predicates.simpleformulas.Term;
import org.sosy_lab.cpachecker.util.predicates.simpleformulas.Variable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version [date omitted]
  */
@SuppressWarnings(value = { "all" }) public  class FQLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FQLParser() {super();}

  /** Constructor which sets the default scanner. */
  public FQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\002" +
    "\006\000\002\007\004\000\002\010\002\000\002\010\004" +
    "\000\002\003\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\005\003\000\002" +
    "\005\005\000\002\005\004\000\002\004\003\000\002\004" +
    "\005\000\002\004\005\000\002\006\006\000\002\006\006" +
    "\000\002\006\010\000\002\006\003\000\002\011\003\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\006\000\002\011\010\000\002\011" +
    "\010\000\002\012\003\000\002\012\006\000\002\012\006" +
    "\000\002\012\003\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\003\000\002" +
    "\012\006\000\002\012\006\000\002\012\006\000\002\012" +
    "\006\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\007\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\224\000\006\056\006\057\005\001\002\000\006\002" +
    "\ufffd\060\053\001\002\000\016\004\212\037\064\047\061" +
    "\050\055\051\057\055\214\001\002\000\062\007\037\010" +
    "\030\011\022\012\026\013\034\014\012\015\011\016\027" +
    "\017\017\020\032\021\025\022\042\023\014\024\020\025" +
    "\024\026\015\027\035\030\013\031\036\032\033\033\031" +
    "\034\016\035\041\036\021\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\004\207\001\002" +
    "\000\004\004\204\001\002\000\004\004\177\001\002\000" +
    "\004\004\174\001\002\000\010\005\uffd5\006\uffd5\057\uffd5" +
    "\001\002\000\004\004\167\001\002\000\010\005\uffdc\006" +
    "\uffdc\057\uffdc\001\002\000\010\005\uffd7\006\uffd7\057\uffd7" +
    "\001\002\000\004\004\162\001\002\000\004\004\157\001" +
    "\002\000\010\005\uffec\006\uffec\057\uffec\001\002\000\010" +
    "\005\uffd6\006\uffd6\057\uffd6\001\002\000\004\004\154\001" +
    "\002\000\010\005\uffe1\006\uffe1\057\uffe1\001\002\000\004" +
    "\004\151\001\002\000\004\004\146\001\002\000\004\004" +
    "\141\001\002\000\004\004\136\001\002\000\004\004\131" +
    "\001\002\000\004\004\126\001\002\000\010\005\uffd4\006" +
    "\uffd4\057\uffd4\001\002\000\004\004\123\001\002\000\010" +
    "\005\uffe4\006\uffe4\057\uffe4\001\002\000\004\057\005\001" +
    "\002\000\004\004\046\001\002\000\004\004\043\001\002" +
    "\000\004\062\044\001\002\000\004\005\045\001\002\000" +
    "\010\005\uffd9\006\uffd9\057\uffd9\001\002\000\062\007\037" +
    "\010\030\011\022\012\026\013\034\014\012\015\011\016" +
    "\027\017\017\020\032\021\025\022\042\023\014\024\020" +
    "\025\024\026\015\027\035\030\013\031\036\032\033\033" +
    "\031\034\016\035\041\036\021\001\002\000\004\005\050" +
    "\001\002\000\010\005\uffe7\006\uffe7\057\uffe7\001\002\000" +
    "\006\002\ufffd\060\053\001\002\000\004\002\uffff\001\002" +
    "\000\014\004\056\037\064\047\061\050\055\051\057\001" +
    "\002\000\020\002\uffed\005\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\060\uffed\001\002\000\004\004\120\001\002\000" +
    "\014\004\056\037\064\047\061\050\055\051\057\001\002" +
    "\000\004\004\111\001\002\000\016\002\ufff3\005\ufff3\052" +
    "\104\053\105\054\106\055\ufff3\001\002\000\004\004\101" +
    "\001\002\000\004\002\ufffc\001\002\000\016\002\ufff6\005" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002\000\006" +
    "\061\067\063\066\001\002\000\016\041\075\042\074\043" +
    "\076\044\072\045\070\046\071\001\002\000\020\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\001" +
    "\002\000\020\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\001\002\000\006\061\uffcc\063\uffcc\001" +
    "\002\000\006\061\uffcb\063\uffcb\001\002\000\006\061\uffcd" +
    "\063\uffcd\001\002\000\006\061\067\063\066\001\002\000" +
    "\006\061\uffcf\063\uffcf\001\002\000\006\061\uffd0\063\uffd0" +
    "\001\002\000\006\061\uffce\063\uffce\001\002\000\004\040" +
    "\100\001\002\000\020\002\uffd3\005\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\060\uffd3\001\002\000\062\007\037\010" +
    "\030\011\022\012\026\013\034\014\012\015\011\016\027" +
    "\017\017\020\032\021\025\022\042\023\014\024\020\025" +
    "\024\026\015\027\035\030\013\031\036\032\033\033\031" +
    "\034\016\035\041\036\021\001\002\000\004\005\103\001" +
    "\002\000\020\002\ufff0\005\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\060\ufff0\001\002\000\014\004\056\037\064\047" +
    "\061\050\055\051\057\001\002\000\014\004\056\037\064" +
    "\047\061\050\055\051\057\001\002\000\016\002\ufff4\005" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\001\002\000\010" +
    "\002\ufff1\005\ufff1\055\ufff1\001\002\000\010\002\ufff2\005" +
    "\ufff2\055\ufff2\001\002\000\062\007\037\010\030\011\022" +
    "\012\026\013\034\014\012\015\011\016\027\017\017\020" +
    "\032\021\025\022\042\023\014\024\020\025\024\026\015" +
    "\027\035\030\013\031\036\032\033\033\031\034\016\035" +
    "\041\036\021\001\002\000\004\006\113\001\002\000\004" +
    "\063\114\001\002\000\004\005\115\001\002\000\020\002" +
    "\uffee\005\uffee\052\uffee\053\uffee\054\uffee\055\uffee\060\uffee" +
    "\001\002\000\004\005\117\001\002\000\016\002\ufff5\005" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\001\002\000\062" +
    "\007\037\010\030\011\022\012\026\013\034\014\012\015" +
    "\011\016\027\017\017\020\032\021\025\022\042\023\014" +
    "\024\020\025\024\026\015\027\035\030\013\031\036\032" +
    "\033\033\031\034\016\035\041\036\021\001\002\000\004" +
    "\005\122\001\002\000\020\002\uffef\005\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\060\uffef\001\002\000\062\007\037" +
    "\010\030\011\022\012\026\013\034\014\012\015\011\016" +
    "\027\017\017\020\032\021\025\022\042\023\014\024\020" +
    "\025\024\026\015\027\035\030\013\031\036\032\033\033" +
    "\031\034\016\035\041\036\021\001\002\000\004\005\125" +
    "\001\002\000\010\005\uffeb\006\uffeb\057\uffeb\001\002\000" +
    "\004\063\127\001\002\000\004\005\130\001\002\000\010" +
    "\005\uffe0\006\uffe0\057\uffe0\001\002\000\062\007\037\010" +
    "\030\011\022\012\026\013\034\014\012\015\011\016\027" +
    "\017\017\020\032\021\025\022\042\023\014\024\020\025" +
    "\024\026\015\027\035\030\013\031\036\032\033\033\031" +
    "\034\016\035\041\036\021\001\002\000\004\006\133\001" +
    "\002\000\062\007\037\010\030\011\022\012\026\013\034" +
    "\014\012\015\011\016\027\017\017\020\032\021\025\022" +
    "\042\023\014\024\020\025\024\026\015\027\035\030\013" +
    "\031\036\032\033\033\031\034\016\035\041\036\021\001" +
    "\002\000\004\005\135\001\002\000\010\005\uffea\006\uffea" +
    "\057\uffea\001\002\000\004\061\137\001\002\000\004\005" +
    "\140\001\002\000\010\005\uffdb\006\uffdb\057\uffdb\001\002" +
    "\000\062\007\037\010\030\011\022\012\026\013\034\014" +
    "\012\015\011\016\027\017\017\020\032\021\025\022\042" +
    "\023\014\024\020\025\024\026\015\027\035\030\013\031" +
    "\036\032\033\033\031\034\016\035\041\036\021\001\002" +
    "\000\004\006\143\001\002\000\062\007\037\010\030\011" +
    "\022\012\026\013\034\014\012\015\011\016\027\017\017" +
    "\020\032\021\025\022\042\023\014\024\020\025\024\026" +
    "\015\027\035\030\013\031\036\032\033\033\031\034\016" +
    "\035\041\036\021\001\002\000\004\005\145\001\002\000" +
    "\010\005\uffe9\006\uffe9\057\uffe9\001\002\000\004\062\147" +
    "\001\002\000\004\005\150\001\002\000\010\005\uffe3\006" +
    "\uffe3\057\uffe3\001\002\000\004\061\152\001\002\000\004" +
    "\005\153\001\002\000\010\005\uffdd\006\uffdd\057\uffdd\001" +
    "\002\000\004\061\155\001\002\000\004\005\156\001\002" +
    "\000\010\005\uffda\006\uffda\057\uffda\001\002\000\004\063" +
    "\160\001\002\000\004\005\161\001\002\000\010\005\uffe2" +
    "\006\uffe2\057\uffe2\001\002\000\062\007\037\010\030\011" +
    "\022\012\026\013\034\014\012\015\011\016\027\017\017" +
    "\020\032\021\025\022\042\023\014\024\020\025\024\026" +
    "\015\027\035\030\013\031\036\032\033\033\031\034\016" +
    "\035\041\036\021\001\002\000\004\006\164\001\002\000" +
    "\062\007\037\010\030\011\022\012\026\013\034\014\012" +
    "\015\011\016\027\017\017\020\032\021\025\022\042\023" +
    "\014\024\020\025\024\026\015\027\035\030\013\031\036" +
    "\032\033\033\031\034\016\035\041\036\021\001\002\000" +
    "\004\005\166\001\002\000\010\005\uffe6\006\uffe6\057\uffe6" +
    "\001\002\000\062\007\037\010\030\011\022\012\026\013" +
    "\034\014\012\015\011\016\027\017\017\020\032\021\025" +
    "\022\042\023\014\024\020\025\024\026\015\027\035\030" +
    "\013\031\036\032\033\033\031\034\016\035\041\036\021" +
    "\001\002\000\004\006\171\001\002\000\062\007\037\010" +
    "\030\011\022\012\026\013\034\014\012\015\011\016\027" +
    "\017\017\020\032\021\025\022\042\023\014\024\020\025" +
    "\024\026\015\027\035\030\013\031\036\032\033\033\031" +
    "\034\016\035\041\036\021\001\002\000\004\005\173\001" +
    "\002\000\010\005\uffe8\006\uffe8\057\uffe8\001\002\000\004" +
    "\062\175\001\002\000\004\005\176\001\002\000\010\005" +
    "\uffd8\006\uffd8\057\uffd8\001\002\000\062\007\037\010\030" +
    "\011\022\012\026\013\034\014\012\015\011\016\027\017" +
    "\017\020\032\021\025\022\042\023\014\024\020\025\024" +
    "\026\015\027\035\030\013\031\036\032\033\033\031\034" +
    "\016\035\041\036\021\001\002\000\004\006\201\001\002" +
    "\000\004\037\064\001\002\000\004\005\203\001\002\000" +
    "\010\005\uffe5\006\uffe5\057\uffe5\001\002\000\004\061\205" +
    "\001\002\000\004\005\206\001\002\000\010\005\uffdf\006" +
    "\uffdf\057\uffdf\001\002\000\004\061\210\001\002\000\004" +
    "\005\211\001\002\000\010\005\uffde\006\uffde\057\uffde\001" +
    "\002\000\016\004\212\037\064\047\061\050\055\051\057" +
    "\055\214\001\002\000\012\002\ufffe\052\220\053\221\060" +
    "\ufffe\001\002\000\014\004\056\037\064\047\061\050\055" +
    "\051\057\001\002\000\014\002\ufffb\005\ufffb\052\ufffb\053" +
    "\ufffb\060\ufffb\001\002\000\004\055\217\001\002\000\014" +
    "\002\ufff9\005\ufff9\052\ufff9\053\ufff9\060\ufff9\001\002\000" +
    "\016\004\212\037\064\047\061\050\055\051\057\055\214" +
    "\001\002\000\016\004\212\037\064\047\061\050\055\051" +
    "\057\055\214\001\002\000\014\002\ufff7\005\ufff7\052\ufff7" +
    "\053\ufff7\060\ufff7\001\002\000\014\002\ufff8\005\ufff8\052" +
    "\ufff8\053\ufff8\060\ufff8\001\002\000\010\005\225\052\220" +
    "\053\221\001\002\000\014\002\ufffa\005\ufffa\052\ufffa\053" +
    "\ufffa\060\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\224\000\006\002\006\007\003\001\001\000\004\010" +
    "\225\001\001\000\010\003\212\006\214\013\053\001\001" +
    "\000\006\011\037\012\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\046\012\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\051\001\001" +
    "\000\002\001\001\000\012\004\061\005\057\006\062\013" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\115\005\057\006\062\013\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\064\001\001\000\004\015" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\101\012\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\107\005\057\006\062\013\053\001\001\000" +
    "\012\004\106\005\057\006\062\013\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\111\012\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\120\012\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\123\012\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\131\012" +
    "\022\001\001\000\002\001\001\000\006\011\133\012\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\141" +
    "\012\022\001\001\000\002\001\001\000\006\011\143\012" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\162\012\022" +
    "\001\001\000\002\001\001\000\006\011\164\012\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\167" +
    "\012\022\001\001\000\002\001\001\000\006\011\171\012" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\177\012\022\001\001\000\002\001\001\000\004\013\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\223\006" +
    "\214\013\053\001\001\000\002\001\001\000\012\004\215" +
    "\005\057\006\062\013\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\222\006\214" +
    "\013\053\001\001\000\010\003\221\006\214\013\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public FQLParser(String pQueryString) {
      this(new StringReader(pQueryString));
	}

	public FQLParser(Reader pReader) {
	  this(new FQLLexer(pReader));
	}

	public FQLParser(InputStream pInputStream) {
	  this(new FQLLexer(pInputStream));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$FQLParser$actions {



  private final FQLParser parser;

  /** Constructor */
  CUP$FQLParser$actions(FQLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FQLParser$do_action(
    int                        CUP$FQLParser$act_num,
    java_cup.runtime.lr_parser CUP$FQLParser$parser,
    java.util.Stack            CUP$FQLParser$stack,
    int                        CUP$FQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FQLParser$result;

      /* select the action based on the action number */
      switch (CUP$FQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Comparison ::= TOK_NEQ
            {
              Object RESULT =null;

							RESULT = org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison.NOT_EQUAL;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",11, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Comparison ::= TOK_LESS
            {
              Object RESULT =null;

							RESULT = org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison.LESS;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",11, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Comparison ::= TOK_LESS_OR_EQ
            {
              Object RESULT =null;

							RESULT = org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison.LESS_OR_EQUAL;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",11, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Comparison ::= TOK_EQ
            {
              Object RESULT =null;

							RESULT = org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison.EQUAL;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",11, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Comparison ::= TOK_GREATER
            {
              Object RESULT =null;

							RESULT = org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison.GREATER;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",11, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Comparison ::= TOK_GREATER_OR_EQ
            {
              Object RESULT =null;

							RESULT = org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison.GREATER_OR_EQUAL;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Comparison",11, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Term ::= TOK_NAT_NUMBER
            {
              Object RESULT =null;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = new Constant(number);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Term",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Term ::= TOK_C_IDENT
            {
              Object RESULT =null;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = new Variable(identifier);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Term",10, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Predicate ::= TOK_L_BRACE Term Comparison Term TOK_R_BRACE
            {
              Object RESULT =null;
		Object leftterm = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object comparison = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightterm = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(leftterm != null);
							assert(comparison != null);
							assert(rightterm != null);

							assert(leftterm instanceof Term);
							assert(comparison instanceof org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison);
							assert(rightterm instanceof Term);

							RESULT = new Predicate(new org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate((Term)leftterm, (org.sosy_lab.cpachecker.util.predicates.simpleformulas.Predicate.Comparison)comparison, (Term)rightterm));

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Predicate",9, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Filter_Function ::= TOK_CONDITIONGRAPH
            {
              Object RESULT =null;

							RESULT = ConditionGraph.getInstance();

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Filter_Function ::= TOK_DECISIONEDGE
            {
              Object RESULT =null;

							RESULT = DecisionEdge.getInstance();

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Filter_Function ::= TOK_CONDITIONEDGE
            {
              Object RESULT =null;

							RESULT = ConditionEdge.getInstance();

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Filter_Function ::= TOK_BASICBLOCKENTRY
            {
              Object RESULT =null;

							RESULT = BasicBlockEntry.getInstance();

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Filter_Function ::= TOK_REGEXP TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String regularexpression = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new RegularExpression(regularexpression);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Filter_Function ::= TOK_EXPR TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String expression = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new Expression(expression);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Filter_Function ::= TOK_EXIT TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new FunctionExit(function);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Filter_Function ::= TOK_ENTRY TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new FunctionEntry(function);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Filter_Function ::= TOK_CALLS
            {
              Object RESULT =null;

							RESULT = FunctionCalls.getInstance();

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Filter_Function ::= TOK_CALL TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new FunctionCall(function);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Filter_Function ::= TOK_LABEL TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String label = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new Label(label);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Filter_Function ::= TOK_FUNC TOK_L_PARENTHESIS TOK_C_IDENT TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String function = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new Function(function);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Filter_Function ::= TOK_COLUMN TOK_L_PARENTHESIS TOK_NAT_NUMBER TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Integer columnnumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new Column(columnnumber);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Filter_Function ::= TOK_LINE_ABBREV
            {
              Object RESULT =null;
		Integer linenumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = new Line(linenumber);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Filter_Function ::= TOK_LINE TOK_L_PARENTHESIS TOK_NAT_NUMBER TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Integer linenumber = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new Line(linenumber);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Filter_Function ::= TOK_FILE TOK_L_PARENTHESIS TOK_QUOTED_STRING TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		String filename = (String)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = new File(filename);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Filter_Function ::= TOK_IDENTITY
            {
              Object RESULT =null;

							RESULT = Identity.getInstance();

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter_Function",8, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Filter ::= TOK_PREDICATION TOK_L_PARENTHESIS Filter TOK_COMMA Predicate TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter != null);
							assert(filter instanceof Filter);

							assert(predicate != null);
							assert(predicate instanceof Predicate);

							RESULT = new Predication((Filter)filter, (Predicate)predicate);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Filter ::= TOK_COMPOSE TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Compose((Filter)filter1, (Filter)filter2);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Filter ::= TOK_ENCLOSING_SCOPES TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new EnclosingScopes((Filter)filter);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Filter ::= TOK_SETMINUS TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new SetMinus((Filter)filter1, (Filter)filter2);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Filter ::= TOK_INTERSECT TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Intersection((Filter)filter1, (Filter)filter2);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Filter ::= TOK_UNION TOK_L_PARENTHESIS Filter TOK_COMMA Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter1 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Object filter2 = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter1 != null);
							assert(filter2 != null);
							assert(filter1 instanceof Filter);
							assert(filter2 instanceof Filter);

							RESULT = new Union((Filter)filter1, (Filter)filter2);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Filter ::= TOK_COMPLEMENT TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new Complement((Filter)filter);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Filter ::= Filter_Function
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = filter;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Filter",7, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Atom ::= Predicate
            {
              Object RESULT =null;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							assert(predicate != null);
							assert(predicate instanceof Predicate);

							RESULT = predicate;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",4, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Atom ::= TOK_PATHCOV TOK_L_PARENTHESIS Filter TOK_COMMA TOK_NAT_NUMBER TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-3)).value;
		Integer bound = (Integer)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter != null);
							assert(filter instanceof Filter);

							assert(bound != null);

							RESULT = new Paths((Filter)filter, bound.intValue());

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",4, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Atom ::= TOK_EDGECOV TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new Edges((Filter)filter);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",4, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Atom ::= TOK_NODECOV TOK_L_PARENTHESIS Filter TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(filter != null);
							assert(filter instanceof Filter);

							RESULT = new Nodes((Filter)filter);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Atom",4, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PathPattern ::= PathPatternBlock TOK_ALTERNATIVE PathPattern
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							assert(leftPattern != null);
							assert(leftPattern instanceof PathPattern);
							assert(rightPattern != null);
							assert(rightPattern instanceof PathPattern);

							RESULT = new org.sosy_lab.cpachecker.fshell.fql2.ast.pathpattern.Union((PathPattern)leftPattern, (PathPattern)rightPattern);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PathPattern ::= PathPatternBlock TOK_CONCAT PathPattern
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							assert(leftPattern != null);
							assert(leftPattern instanceof PathPattern);
							assert(rightPattern != null);
							assert(rightPattern instanceof PathPattern);

							RESULT = new org.sosy_lab.cpachecker.fshell.fql2.ast.pathpattern.Concatenation((PathPattern)leftPattern, (PathPattern)rightPattern);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PathPattern ::= PathPatternBlock
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = pattern;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPattern",2, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PathPatternBlock ::= PathPatternBlock TOK_KLEENE
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(pattern != null);
							assert(pattern instanceof PathPattern);

							RESULT = new org.sosy_lab.cpachecker.fshell.fql2.ast.pathpattern.Repetition((PathPattern)pattern);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPatternBlock",3, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PathPatternBlock ::= TOK_L_PARENTHESIS PathPattern TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = pattern;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPatternBlock",3, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PathPatternBlock ::= Atom
            {
              Object RESULT =null;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = atom;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("PathPatternBlock",3, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CoveragePattern ::= CoveragePattern TOK_ALTERNATIVE CoveragePattern
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							assert(leftPattern != null);
							assert(leftPattern instanceof CoverageSpecification);
							assert(rightPattern != null);
							assert(rightPattern instanceof CoverageSpecification);

							RESULT = new org.sosy_lab.cpachecker.fshell.fql2.ast.coveragespecification.Union((CoverageSpecification)leftPattern, (CoverageSpecification)rightPattern);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CoveragePattern ::= CoveragePattern TOK_CONCAT CoveragePattern
            {
              Object RESULT =null;
		Object leftPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object rightPattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							assert(leftPattern != null);
							assert(leftPattern instanceof CoverageSpecification);
							assert(rightPattern != null);
							assert(rightPattern instanceof CoverageSpecification);

							RESULT = new Concatenation((CoverageSpecification)leftPattern, (CoverageSpecification)rightPattern);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CoveragePattern ::= TOK_QUOTE PathPattern TOK_QUOTE
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							assert(pattern != null);
							assert(pattern instanceof PathPattern);

							RESULT = new Quotation((PathPattern)pattern);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CoveragePattern ::= TOK_L_PARENTHESIS CoveragePattern TOK_R_PARENTHESIS
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;

							RESULT = pattern;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CoveragePattern ::= Atom
            {
              Object RESULT =null;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = atom;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("CoveragePattern",1, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Passing ::= TOK_PASSING PathPattern
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = pattern;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Passing",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Passing ::=
            {
              Object RESULT =null;

							RESULT = null;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Passing",6, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cover ::= TOK_COVER CoveragePattern
            {
              Object RESULT =null;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							RESULT = pattern;

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("Cover",5, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FQLSpecification ::= TOK_IN Filter Cover Passing
            {
              Object RESULT =null;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-2)).value;
		Object coverage = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		Object passing = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

						 	assert(filter != null);
						 	assert(filter instanceof Filter);
						 	assert(coverage != null);
							assert(coverage instanceof CoverageSpecification);
							assert(passing != null);
							assert(passing instanceof PathPattern);

							Filter lScope = (Filter)filter;

							ScopePropagator lScopePropagator = new ScopePropagator(lScope);

							CoverageSpecification lScopedSpecification = ((CoverageSpecification)coverage).accept(lScopePropagator);

							RESULT = new FQLSpecification(lScopedSpecification, (PathPattern)passing);

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("FQLSpecification",0, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FQLSpecification ::= Cover Passing
            {
              Object RESULT =null;
		Object coverage = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		Object passing = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.peek()).value;

							assert(coverage != null);
							assert(coverage instanceof CoverageSpecification);

							if (passing == null) {
							  RESULT = new FQLSpecification((CoverageSpecification)coverage);
							}
							else {
								assert(passing instanceof PathPattern);

								RESULT = new FQLSpecification((CoverageSpecification)coverage, (PathPattern)passing);
							}

              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("FQLSpecification",0, RESULT);
            }
          return CUP$FQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FQLSpecification EOF
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FQLParser$stack.elementAt(CUP$FQLParser$top-1)).value;
		RESULT = start_val;
              CUP$FQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$FQLParser$parser.done_parsing();
          return CUP$FQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

