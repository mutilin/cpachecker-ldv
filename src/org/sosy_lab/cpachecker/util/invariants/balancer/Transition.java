/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2010  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.sosy_lab.cpachecker.util.invariants.balancer;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.sosy_lab.cpachecker.util.invariants.templates.TemplateFormula;
import org.sosy_lab.cpachecker.util.invariants.templates.TemplateTerm;
import org.sosy_lab.cpachecker.util.invariants.templates.TemplateVariable;
import org.sosy_lab.cpachecker.util.invariants.templates.VariableWriteMode;


public class Transition {

  private final TemplateMap tmap;
  private final Location start;
  private final TemplateFormula constraint;
  private final Location end;
  //private HashMap<Integer,Integer> initialIndexMap;
  //private HashMap<Integer,Integer> finalIndexMap;
  private String eliminationFormula;
  private List<String> eliminationParameters;
  private Set<String> rhsParameters = null;

  public Transition(TemplateMap tmap, Location s, TemplateFormula c, Location e) {
    this.tmap = tmap;
    this.start = s;
    this.constraint = c;
    this.end = e;
  }

  public Location getStart() {
    return start;
  }

  public TemplateFormula getConstraint() {
    return constraint;
  }

  public Location getEnd() {
    return end;
  }

  public String getEliminationFormula() {
    return eliminationFormula;
  }

  public String getEliminationFormula(boolean lhsParamsNotAllZero) {
    String phi = eliminationFormula;
    if (lhsParamsNotAllZero) {
      if (rhsParameters == null) {
        computeRHSParameters();
      }
      String zeta = "";
      for (String p : eliminationParameters) {
        if (!rhsParameters.contains(p)) {
          zeta += " and " + p + " = 0";
        }
      }
      if (zeta.length() > 0) {
        zeta = " and not (" + zeta.substring(5) + ")";
      }
      phi += zeta;
    }
    return phi;
  }

  public void setEliminationFormula(String pEliminationFormula) {
    eliminationFormula = pEliminationFormula;
  }

  public List<String> getEliminationParameters() {
    return eliminationParameters;
  }

  public void setEliminationParameters(List<String> pEliminationParameters) {
    eliminationParameters = pEliminationParameters;
  }

  /**
   * Compute the set of all parameters occurring on the right hand
   * sides of the constraints in the two templates for this transition.
   * The purpose is to exclude these parameters from a statement that
   * at least one parameter is nonzero, as generated by {@link:getEliminationFormula}.
   * This allows us to demand that at least one parameter on the left hand
   * side of a template constraint be nonzero.
   */
  private void computeRHSParameters() {
    Set<String> s = new HashSet<String>();
    s.addAll(computeRHSParameters(start));
    s.addAll(computeRHSParameters(end));
    rhsParameters = s;
  }

  private Set<String> computeRHSParameters(Location l) {
    TemplateFormula f = tmap.get(l);
    Set<TemplateTerm> terms = f.getRHSTerms();
    Set<String> s = new HashSet<String>();
    for (TemplateTerm t : terms) {
      if (t.hasParameter()) {
        TemplateVariable v = t.getParameter();
        String p = v.toString(VariableWriteMode.REDLOG);
        s.add(p);
      }
    }
    return s;
  }

}


















