analysis.entryFunction = ldv_main
analysis.saveLocalResults = true
analysis.functionPointerCalls = true

cpa.arg.export = false
cfa.export = false
cpa.bam.exportARGs = false
cpa.bam.useExtendedPartitioningBuilder = true

cpa = cpa.bam.BAMCPA
BAMCPA.cpa = cpa.arg.ARGCPA

# FunctionPointerCPA provides handling of function pointers
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.local.LocalCPA
 
output.disable = true
coverage.output = coverage.info
cpa.local.allocatefunctions = memAlloc, malloc, _zalloc, kzalloc, kmalloc, kcalloc, input_allocate_device, alloc_libipw, mmc_alloc_host, mdiobus_alloc, alloc_etherdev_mqs, alloc_netdev_mqs, alloc_arcdev, alloc_candev, __alloc_ei_netdev, alloc_irdadev, rtnl_create_link, alloc_hdlcdev, alloc_fcdev, alloc_fddidev, alloc_hippi_dev, input_allocate_device, mmc_alloc_host, mite_alloc, rotary_encoder_parse_dt, umc_device_create, kstrdup, kasprintf, fb_ddc_read, acpi_evaluate_dsm, drm_get_edid, scsi_bios_ptable, hid_alloc_report_buf, match_strdup, devm_kzalloc, devm_iio_device_alloc, ldv_successful_alloc, alloc_etherdev
cpa.callstack.skipRecursion = true

cpa.local.conservativefunctions = netdev_priv
# log.consoleLevel = ALL
