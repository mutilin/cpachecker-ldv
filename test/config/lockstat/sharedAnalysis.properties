analysis.entryFunction = ldv_main
analysis.saveLocalResults = true
analysis.summaryEdges = true
analysis.functionPointerCalls = true
cpa.functionpointer.ignoreUnknownFunctionPointerCalls=false
analysis.functionPointerTargets = USED_IN_CODE, EQ_PARAM_TYPES, EQ_PARAM_COUNT, RETURN_VALUE
coverage.export = true

cfa.export = false
cfa.exportPerFunction = false
cfa.callgraph.export = false

cpa = cpa.bam.BAMCPA
cpa.arg.export = false
BAMCPA.cpa = cpa.arg.ARGCPA

# FunctionPointerCPA provides handling of function pointers
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.local.LocalCPA, cpa.functionpointer.FunctionPointerCPA

cpa.bam.handleRecursiveProcedures = false

output.disable = false
coverage.output = coverage.info
cpa.local.allocatefunctions = memAlloc, _memAlloc, malloc, objCreate, memSplitBlock, syspool_malloc, _zalloc, m_gethdr, m_get, soalloc, objAllocate, threadCreate, socreate, mqdInit, fileCreate, falloc, objGetFreeItem, mqdInit, modMemAlloc, modMPDSharedAlloc, getnewvnode
objAllocate.parameter = 4
objCreate.parameter = 5
threadCreate.parameter = 1
socreate.parameter = 2
mqdInit.parameter = 2
falloc.parameter = 1
objGetFreeItem.parameter = 2
getnewvnode.parameter = 4
cpa.callstack.skipRecursion = true
cpa.local.localvariables = **argtable, threadExecuting, mmbfree

# log.consoleLevel = ALL