# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true
analysis.functionPointerCalls = false
cpa.functionpointer.ignoreUnknownFunctionPointerCalls=false
precision.path = localsave
analysis.summaryEdges = true
analysis.reachedSet = USAGESTATISTICS

# analysis.useCBMC = true
analysis.algorithm.CEGAR = true

analysis.entryFunction = ldv_main

output.disable = false

cpa.callstack.skipRecursion = true
# cfa.useMultiEdges   = true

# parser.readLineDirectives = true
# parser.usePrepr
coverage.export = true
coverage.file = coverage.info

# parser.dialect = GNUC

# cpa.predicate.solver=SMTInterpol

cegar.refiner = cpa.usagestatistics.UsageStatisticsRefiner
cegar.refinementLoops = 10
cpa.usagestatistics.precisionReset = 10
cpa.usagestatistics.totalARGCleaning = true
cpa.usagestatistics.refinementChain = IdentifierIterator, PointIterator, UsageIterator, PathIterator, PredicateRefiner, ProbeFilter
cpa.bam.cleanARGAfterAllRefinements = true
cpa.lockstatistics.aggressiveReduction = true
# cpa.lockstatistics.reduceUselessLocks = true
# cegar.globalRefinement = true
# cegar.timeLimit = 30

cpa.usagestatistics.printFalseUnsafes = true
# cpa.usagestatistics.printAllUnsafeUsages = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.bam.BAMCPA
BAMCPA.cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.usagestatistics.UsageStatisticsCPA

UsageStatisticsCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.lockstatistics.LockStatisticsCPA, cpa.predicate.BAMPredicateCPA, cpa.functionpointer.FunctionPointerCPA

cpa.arg.export = false
cpa.arg.errorPath.export = false

cpa.bam.handleRecursiveProcedures = false

cpa.predicate.bam.agressiveReduce = true

#include predicateAnalysis.properties

# cpa.explicit.initialPrecisionFile = initialExplicitPrecision_lock

# cpa.composite.precAdjust               = COMPONENT
# cegar.refiner                          = cpa.explicit.refiner.DelegatingExplicitRefiner
# this automaton defines which locations are the error locations
# specification = default.spc

cpa.bam.blockHeuristic = FunctionPartitioning
cpa.bam.gatherCacheMissStatistics = false
cpa.bam.aggressiveCaching = false

# cpa.predicate.blk.alwaysAtFunctions = true
# cpa.predicate.blk.alwaysAtLoops     = true

# cpa.predicate.abm.auxiliaryPredicateComputer = false

# Set time limit to 15 minutes
# cpa.conditions.global.time.wall = 15min

#include annotated_functions.properties

#include locks.properties

cpa.lockStatistics.lockreset = lockreset

#include usagestatistics.properties

# cpa.usagestatistics.fullstatistics = false

# cpa.usagestatistics.unsafeDetectorType = PAIR

# log.consoleLevel = ALL

cpa.local.allocatefunctions = memAlloc, _memAlloc, malloc, objCreate, memSplitBlock, syspool_malloc, _zalloc, m_gethdr, m_get, soalloc, objAllocate, threadCreate, socreate, mqdInit, fileCreate, falloc, objGetFreeItem, mqdInit, modMemAlloc, modMPDSharedAlloc, getnewvnode, selCreate
objAllocate.parameter = 4
objCreate.parameter = 5
threadCreate.parameter = 1
socreate.parameter = 2
mqdInit.parameter = 2
falloc.parameter = 1
objGetFreeItem.parameter = 2
getnewvnode.parameter = 4
cpa.callstack.skipRecursion = true
cpa.local.localvariables = **argtable, threadExecuting, mmbfree
cpa.local.conservativefunctions = netdev_priv