# ----------------------------------------------------------------------
# This configuration file uses a combination of block abstraction memoisation
# and predicate-analysis to verify recursive procedures.
# ----------------------------------------------------------------------

analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

analysis.algorithm.CEGAR = true
cegar.refiner = cpa.predicate.BAMPredicateRefiner

cpa = cpa.bam.BAMCPA
BAMCPA.cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.BAMPredicateCPA

# with refinement, we can _not_ use aggressive caching,
# because the precision is very important here.
cpa.bam.aggressiveCaching=false

# enable support for recursion
cpa.bam.handleRecursiveProcedures=true
cpa.callstack.depth=1

solver.solver=SMTINTERPOL

# strategy is very important for recursion!
cpa.predicate.refinement.strategy = tree

# use additional symbols, needed for tree-interpolation (for some solvers)
cpa.predicate.useParameterVariables = true
cpa.predicate.useParameterVariablesForGlobals = true

# set abstraction locations according to BAM
cpa.predicate.blk.alwaysAtFunctions = true
cpa.predicate.blk.alwaysAtLoops     = true
cpa.predicate.blk.alwaysAtFunctionCallNodes = true

cpa.predicate.bam.auxiliaryPredicateComputer = false

cpa.predicate.handlePointerAliasing = false

# The encoding is only important, if different solvers are compared, 
# because the only commonly supported type is INTEGER.
# Currently there are no bitvectors or floats in the test-set for recursion.
# Thus we use INTEGER as default.
cpa.predicate.encodeBitvectorAs = INTEGER
cpa.predicate.encodeFloatAs = INTEGER

# this automaton defines which locations are the error locations
specification = specification/default.spc

#include includes/resource-limits.properties
