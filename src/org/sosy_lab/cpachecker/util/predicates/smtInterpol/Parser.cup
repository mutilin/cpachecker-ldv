/* CUP specification for smtlib */

package org.sosy_lab.cpachecker.util.predicates.smtInterpol;
import de.uni_freiburg.informatik.ultimate.logic.*;
import java.math.BigInteger;
import java.math.BigDecimal;
import java.io.Reader;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import org.sosy_lab.common.Pair;

parser code {:
  SmtInterpolEnvironment env;
  List<Term> termList = new ArrayList<Term>();

  public Parser(SmtInterpolEnvironment env, Reader reader) {
    ComplexSymbolFactory sf = new ComplexSymbolFactory();
    Lexer lexer = new Lexer(reader);
    lexer.setSymbolFactory(sf);
    this.setScanner(lexer);
    this.symbolFactory = sf;
    this.env = env;  
  }

  public Term[] getTerms() {
    return termList.toArray(new Term[0]);
  }
:}

action code {:
  Map<String,TermVariable> localVars = new HashMap<String, TermVariable>(); 
  List<Object> varScopes = new ArrayList<Object>();

  public Sort lookupSort(String name, Sort[] args) {
    if (args != null) {
      for (Sort s: args) {
        if (s == null) return null;
      }
    }
    return parser.env.sort(name, args);
  }
  
  public Term createTerm(String fun, Term[] params) {
    return parser.env.term(fun, params);
  }

  public TermVariable createTermVariable(String name, Sort sort) {
    if (sort == null) {
       return null;
    }
    try {
      TermVariable tv = parser.env.variable(name, sort);
      Object old = localVars.get(name);
      if (old == null) {
        old = name;
      }
      varScopes.add(old);
      localVars.put(tv.getName(), tv);
      return tv;
    } catch (SMTLIBException cannotHappen) {}
    // Actually unreachable
    throw new AssertionError();
  }
  
  public void popTermVariable() {
    Object old = varScopes.remove(varScopes.size()-1);
    if (old instanceof String) {
      localVars.remove((String) old);
    } else {
      TermVariable oldVar = (TermVariable) old;
      localVars.put(oldVar.getName(), oldVar);
    }
  }
:}

/*init with {: getScanner().init(); :} */
scan with {: return getScanner().next_token(); :}

/* Predefined Symbols */
terminal String BANG, DECLAREFUN, EXISTS, FORALL, LET, SETINFO;

/* Predefined Keywords */
terminal String NAMED, SOURCE, HEXADECIMAL, BINARY, NUMERAL, DECIMAL, STRING;
terminal LPAR, RPAR;

non terminal String identifier;
non terminal Sort sort;
non terminal List<Sort> sorts, sorts_0;
non terminal Annotation annotation;
non terminal List<Annotation> annotations;
non terminal Pair<TermVariable, Term> varBinding;
non terminal List<Pair<TermVariable, Term>> varBindings;
non terminal TermVariable sortedVar;
non terminal List<TermVariable> sortedVars;
non terminal outerTerm, declaration, setinfo;
non terminal Term constantTerm, term;
non terminal List<Term> terms;
non terminal goal;

goal ::= LPAR outerTerm RPAR goal
       | LPAR declaration RPAR goal
       | LPAR setinfo RPAR goal
       | /* empty */;
outerTerm ::= term:t {: parser.termList.add(t); :};

constantTerm ::= NUMERAL:n     {: RESULT = parser.env.numeral(n); :}
               | DECIMAL:n     {: RESULT = parser.env.decimal(n); :}
               | HEXADECIMAL:n {: RESULT = parser.env.hexadecimal(n); :}
               | BINARY:n      {: RESULT = parser.env.binary(n); :};

identifier ::= STRING:s {: RESULT = s; :};

sorts_0 ::= sorts:lst {: RESULT = lst; :}
        | /* empty */ {: RESULT = new ArrayList<Sort>(); :};

sorts ::= sort:s sorts:lst {: lst.add(0,s); RESULT = lst; :} // insert at the beginning of the list to preserve the order.
        | sort:s {: RESULT = new ArrayList<Sort>(); RESULT.add(s); :};

sort ::= identifier:id {: RESULT = lookupSort(id, null); :} 
       | LPAR identifier:id sorts:lst RPAR
         {: RESULT = lookupSort(id, lst.toArray(new Sort[0])); :};

annotations ::= annotation:a annotations:lst {: lst.add(0,a); RESULT = lst; :} // insert at the beginning of the list to preserve the order.
            | annotation:a {: RESULT = new ArrayList<Annotation>(); RESULT.add(a); :};

annotation ::= NAMED:k STRING:v {: RESULT = new Annotation(k, v); :};

varBindings ::= varBinding:vb varBindings:lst {: lst.add(0,vb); RESULT = lst; :} // insert at the beginning of the list to preserve the order.
            | varBinding:vb {: RESULT = new ArrayList<Pair<TermVariable, Term>>(); RESULT.add(vb); :};

varBinding ::= LPAR STRING:sym term:t RPAR
         {: TermVariable tv = createTermVariable(sym, t.getSort());
            RESULT = Pair.of(tv, t); :};

sortedVars ::= sortedVar:sv sortedVars:lst {: lst.add(0,sv); RESULT = lst; :} // insert at the beginning of the list to preserve the order.
            | sortedVar:sv {: RESULT = new ArrayList<TermVariable>(); RESULT.add(sv); :};

sortedVar ::= LPAR STRING:sym sort:s RPAR
         {: RESULT = createTermVariable(sym, s); :};

terms   ::= term:t terms:lst {: lst.add(0,t); RESULT = lst; :} // insert at the beginning of the list to preserve the order.
          | term:t {: RESULT = new ArrayList<Term>(); RESULT.add(t); :};

term ::= constantTerm:ct
         {: RESULT = ct; :}

       | identifier:fun
         {: RESULT = createTerm(fun, new Term[0]); :}

       | LPAR identifier:fun terms:lst RPAR
         {: RESULT = createTerm(fun, lst.toArray(new Term[0])); :}

       | LPAR LET LPAR varBindings:bindings RPAR term:t RPAR
         {: TermVariable[] vars = new TermVariable[bindings.size()];
            Term[] terms = new Term[bindings.size()];
            int i = 0;
            for (Pair<TermVariable, Term> binding : bindings) {
              if (binding != null) {
                vars[i] = binding.getFirst();
                terms[i] = binding.getSecond();
                popTermVariable();
              }
              i++;
            }
            RESULT = parser.env.let(vars, terms, t); :}

       | LPAR FORALL LPAR sortedVars:vars RPAR term:t RPAR
         {: for (int i = 0; i < vars.size(); i++)
              if (vars.get(i) != null)
                popTermVariable();
            RESULT = parser.env.quantifier(Script.FORALL, vars.toArray(new TermVariable[0]), t); :}

       | LPAR EXISTS LPAR sortedVars:vars RPAR term:t RPAR
         {: for (int i = 0; i < vars.size(); i++)
              if (vars.get(i) != null)
                popTermVariable();
            RESULT = parser.env.quantifier(Script.EXISTS, vars.toArray(new TermVariable[0]), t); :}

       | LPAR BANG term:t annotations:annots RPAR
         {: if (t == null) { // TODO do we need this check?
              RESULT = null;
            } else {
              RESULT = parser.env.annotate(t, annots.toArray(new Annotation[0]));
            }
         :};

declaration ::= DECLAREFUN STRING:fun LPAR sorts_0:params RPAR sort:result
            {: parser.env.declareFun(fun, params.toArray(new Sort[0]), result); :};

setinfo ::= SETINFO SOURCE STRING
            {: ; :};
