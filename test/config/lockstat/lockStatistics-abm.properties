# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true
analysis.functionPointerCalls = false
precision.path = localsave
analysis.summaryEdges = true
analysis.reachedSet = USAGESTATISTICS

# analysis.useCBMC = true
analysis.algorithm.CEGAR = true

analysis.entryFunction = ldv_main

output.disable = false

cpa.callstack.skipRecursion = true
# cfa.useMultiEdges   = true

coverage.export = true
coverage.file = coverage.info

# parser.dialect = GNUC

# cpa.predicate.solver=SMTInterpol

cegar.refiner = cpa.usagestatistics.UsageStatisticsRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.abm.ABMCPA
ABMCPA.cpa = cpa.arg.ARGCPA

ARGCPA.cpa = cpa.usagestatistics.UsageStatisticsCPA

UsageStatisticsCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.lockstatistics.LockStatisticsCPA, cpa.predicate.ABMPredicateCPA

cpa.arg.export = false
cpa.arg.errorPath.export = false

#include predicateAnalysis.properties

# cpa.explicit.initialPrecisionFile = initialExplicitPrecision_lock

# cpa.composite.precAdjust               = COMPONENT
# cegar.refiner                          = cpa.explicit.refiner.DelegatingExplicitRefiner
# this automaton defines which locations are the error locations
# specification = default.spc

cpa.abm.blockHeuristic = FunctionPartitioning
cpa.abm.gatherCacheMissStatistics = false
cpa.abm.aggressiveCaching = false

# cpa.predicate.blk.alwaysAtFunctions = true
# cpa.predicate.blk.alwaysAtLoops     = true

# cpa.predicate.abm.auxiliaryPredicateComputer = false

# Set time limit to 15 minutes
# cpa.conditions.global.time.wall = 15min

#include annotated_functions.properties

#include locks.properties

cpa.lockStatistics.lockreset = lockreset

#include usagestatistics.properties

# cpa.usagestatistics.fullstatistics = false

# cpa.usagestatistics.unsafeDetectorType = PAIR

# log.consoleLevel = ALL

