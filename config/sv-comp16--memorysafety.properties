# ----------------------------------------------------------------------
# This configuration file uses a combination of value analysis
# and symbolic memory graphs to verify memory safety properties.
# ----------------------------------------------------------------------

#include includes/valueAnalysis.properties

# specification to find memory related problems
specification = specification/cpalien-leaks.spc, specification/TerminatingFunctions.spc

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.value.ValueAnalysisCPA, cpa.functionpointer.FunctionPointerCPA, cpa.smg.SMGCPA

# checking conterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

analysis.traversal.order                  = dfs
analysis.traversal.useReversePostorder    = false
analysis.traversal.useCallstack           = false

cpa.smg.enableMallocFail       = false
cpa.smg.handleUnknownFunctions = assume_safe
cpa.smg.guessSizeOfUnknownMemorySize = false

cfa.useMultiEdges = false

# Disable all output files except the witness.
output.disable = true

# Write witness to file (required by competition).
cpa.arg.errorPath.graphml=witness.graphml

# simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# CFA branch swapping is bad for witnesses
cfa.allowBranchSwapping = false

# Do not export constant values for pointers
# if an external tool is supposed to check the witness:
# the concrete value we use might not make sense in a real setting
counterexample.export.assumptions.includeConstantsForPointers = false

# Disable statistics for memory consumption.
statistics.memory = false

# This is the configuration used when verifying memory safety properties (actually this configuration).
memorysafety.config = sv-comp16--memorysafety.properties
